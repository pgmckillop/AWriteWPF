#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AWriteDB.LTSC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="awrite")]
	public partial class AWriteLTSCDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcademicLevel(AcademicLevel instance);
    partial void UpdateAcademicLevel(AcademicLevel instance);
    partial void DeleteAcademicLevel(AcademicLevel instance);
    partial void InsertUnitStatus(UnitStatus instance);
    partial void UpdateUnitStatus(UnitStatus instance);
    partial void DeleteUnitStatus(UnitStatus instance);
    partial void InsertAssessment(Assessment instance);
    partial void UpdateAssessment(Assessment instance);
    partial void DeleteAssessment(Assessment instance);
    partial void InsertAssessmentObjective(AssessmentObjective instance);
    partial void UpdateAssessmentObjective(AssessmentObjective instance);
    partial void DeleteAssessmentObjective(AssessmentObjective instance);
    partial void InsertAssessmentTask(AssessmentTask instance);
    partial void UpdateAssessmentTask(AssessmentTask instance);
    partial void DeleteAssessmentTask(AssessmentTask instance);
    partial void InsertAssessmentTaskCondition(AssessmentTaskCondition instance);
    partial void UpdateAssessmentTaskCondition(AssessmentTaskCondition instance);
    partial void DeleteAssessmentTaskCondition(AssessmentTaskCondition instance);
    partial void InsertAssessmentType(AssessmentType instance);
    partial void UpdateAssessmentType(AssessmentType instance);
    partial void DeleteAssessmentType(AssessmentType instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCourseUnit(CourseUnit instance);
    partial void UpdateCourseUnit(CourseUnit instance);
    partial void DeleteCourseUnit(CourseUnit instance);
    partial void InsertCurriculum(Curriculum instance);
    partial void UpdateCurriculum(Curriculum instance);
    partial void DeleteCurriculum(Curriculum instance);
    partial void InsertLOTopic(LOTopic instance);
    partial void UpdateLOTopic(LOTopic instance);
    partial void DeleteLOTopic(LOTopic instance);
    partial void InsertQualification(Qualification instance);
    partial void UpdateQualification(Qualification instance);
    partial void DeleteQualification(Qualification instance);
    partial void InsertQualificationPathway(QualificationPathway instance);
    partial void UpdateQualificationPathway(QualificationPathway instance);
    partial void DeleteQualificationPathway(QualificationPathway instance);
    partial void InsertQualUnit(QualUnit instance);
    partial void UpdateQualUnit(QualUnit instance);
    partial void DeleteQualUnit(QualUnit instance);
    partial void InsertSystemUser(SystemUser instance);
    partial void UpdateSystemUser(SystemUser instance);
    partial void DeleteSystemUser(SystemUser instance);
    partial void InsertSystemUserType(SystemUserType instance);
    partial void UpdateSystemUserType(SystemUserType instance);
    partial void DeleteSystemUserType(SystemUserType instance);
    partial void InsertTaskAO(TaskAO instance);
    partial void UpdateTaskAO(TaskAO instance);
    partial void DeleteTaskAO(TaskAO instance);
    partial void InsertTaskKeyword(TaskKeyword instance);
    partial void UpdateTaskKeyword(TaskKeyword instance);
    partial void DeleteTaskKeyword(TaskKeyword instance);
    partial void InsertTaskTopicRange(TaskTopicRange instance);
    partial void UpdateTaskTopicRange(TaskTopicRange instance);
    partial void DeleteTaskTopicRange(TaskTopicRange instance);
    partial void InsertTopicKeyword(TopicKeyword instance);
    partial void UpdateTopicKeyword(TopicKeyword instance);
    partial void DeleteTopicKeyword(TopicKeyword instance);
    partial void InsertTopicTestingMethod(TopicTestingMethod instance);
    partial void UpdateTopicTestingMethod(TopicTestingMethod instance);
    partial void DeleteTopicTestingMethod(TopicTestingMethod instance);
    partial void InsertUnitLearningOutcome(UnitLearningOutcome instance);
    partial void UpdateUnitLearningOutcome(UnitLearningOutcome instance);
    partial void DeleteUnitLearningOutcome(UnitLearningOutcome instance);
    partial void InsertUnitsAssessed(UnitsAssessed instance);
    partial void UpdateUnitsAssessed(UnitsAssessed instance);
    partial void DeleteUnitsAssessed(UnitsAssessed instance);
    #endregion
		
		public AWriteLTSCDataContext() : 
				base(global::AWriteDB.Properties.Settings.Default.awriteConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AWriteLTSCDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AWriteLTSCDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AWriteLTSCDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AWriteLTSCDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AcademicLevel> AcademicLevels
		{
			get
			{
				return this.GetTable<AcademicLevel>();
			}
		}
		
		public System.Data.Linq.Table<UnitStatus> UnitStatus
		{
			get
			{
				return this.GetTable<UnitStatus>();
			}
		}
		
		public System.Data.Linq.Table<Assessment> Assessments
		{
			get
			{
				return this.GetTable<Assessment>();
			}
		}
		
		public System.Data.Linq.Table<AssessmentObjective> AssessmentObjectives
		{
			get
			{
				return this.GetTable<AssessmentObjective>();
			}
		}
		
		public System.Data.Linq.Table<AssessmentTask> AssessmentTasks
		{
			get
			{
				return this.GetTable<AssessmentTask>();
			}
		}
		
		public System.Data.Linq.Table<AssessmentTaskCondition> AssessmentTaskConditions
		{
			get
			{
				return this.GetTable<AssessmentTaskCondition>();
			}
		}
		
		public System.Data.Linq.Table<AssessmentType> AssessmentTypes
		{
			get
			{
				return this.GetTable<AssessmentType>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CourseUnit> CourseUnits
		{
			get
			{
				return this.GetTable<CourseUnit>();
			}
		}
		
		public System.Data.Linq.Table<Curriculum> Curriculums
		{
			get
			{
				return this.GetTable<Curriculum>();
			}
		}
		
		public System.Data.Linq.Table<LOTopic> LOTopics
		{
			get
			{
				return this.GetTable<LOTopic>();
			}
		}
		
		public System.Data.Linq.Table<Qualification> Qualifications
		{
			get
			{
				return this.GetTable<Qualification>();
			}
		}
		
		public System.Data.Linq.Table<QualificationPathway> QualificationPathways
		{
			get
			{
				return this.GetTable<QualificationPathway>();
			}
		}
		
		public System.Data.Linq.Table<QualUnit> QualUnits
		{
			get
			{
				return this.GetTable<QualUnit>();
			}
		}
		
		public System.Data.Linq.Table<SystemUser> SystemUsers
		{
			get
			{
				return this.GetTable<SystemUser>();
			}
		}
		
		public System.Data.Linq.Table<SystemUserType> SystemUserTypes
		{
			get
			{
				return this.GetTable<SystemUserType>();
			}
		}
		
		public System.Data.Linq.Table<TaskAO> TaskAOs
		{
			get
			{
				return this.GetTable<TaskAO>();
			}
		}
		
		public System.Data.Linq.Table<TaskKeyword> TaskKeywords
		{
			get
			{
				return this.GetTable<TaskKeyword>();
			}
		}
		
		public System.Data.Linq.Table<TaskTopicRange> TaskTopicRanges
		{
			get
			{
				return this.GetTable<TaskTopicRange>();
			}
		}
		
		public System.Data.Linq.Table<TopicKeyword> TopicKeywords
		{
			get
			{
				return this.GetTable<TopicKeyword>();
			}
		}
		
		public System.Data.Linq.Table<TopicTestingMethod> TopicTestingMethods
		{
			get
			{
				return this.GetTable<TopicTestingMethod>();
			}
		}
		
		public System.Data.Linq.Table<UnitLearningOutcome> UnitLearningOutcomes
		{
			get
			{
				return this.GetTable<UnitLearningOutcome>();
			}
		}
		
		public System.Data.Linq.Table<UnitsAssessed> UnitsAssesseds
		{
			get
			{
				return this.GetTable<UnitsAssessed>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAcadLevelByID")]
		public ISingleResult<GetAcadLevelByIDResult> GetAcadLevelByID([global::System.Data.Linq.Mapping.ParameterAttribute(Name="LevelID", DbType="Int")] System.Nullable<int> levelID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), levelID);
			return ((ISingleResult<GetAcadLevelByIDResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetSystemUserByLogin")]
		public ISingleResult<GetSystemUserByLoginResult> GetSystemUserByLogin([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(1)")] string systemUserLoginName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), systemUserLoginName);
			return ((ISingleResult<GetSystemUserByLoginResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetAllCourseUnits")]
		public ISingleResult<GetAllCourseUnitsResult> GetAllCourseUnits()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GetAllCourseUnitsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCoursesByPathway")]
		public ISingleResult<GetCoursesByPathwayResult> GetCoursesByPathway([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idPathway)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idPathway);
			return ((ISingleResult<GetCoursesByPathwayResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCourseUnitsByCourse")]
		public ISingleResult<GetCourseUnitsByCourseResult> GetCourseUnitsByCourse([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idCourse)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idCourse);
			return ((ISingleResult<GetCourseUnitsByCourseResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCourseUnitsByCourseAllInfo")]
		public ISingleResult<GetCourseUnitsByCourseAllInfoResult> GetCourseUnitsByCourseAllInfo([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idCourse)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idCourse);
			return ((ISingleResult<GetCourseUnitsByCourseAllInfoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetCurriculumByLevel")]
		public ISingleResult<GetCurriculumByLevelResult> GetCurriculumByLevel([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idAcadLevel)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idAcadLevel);
			return ((ISingleResult<GetCurriculumByLevelResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetPathwaysByQualification")]
		public ISingleResult<GetPathwaysByQualificationResult> GetPathwaysByQualification([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idQualification)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idQualification);
			return ((ISingleResult<GetPathwaysByQualificationResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetQualificationByCurriculum")]
		public ISingleResult<GetQualificationByCurriculumResult> GetQualificationByCurriculum([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> idCurriculum)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), idCurriculum);
			return ((ISingleResult<GetQualificationByCurriculumResult>)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcademicLevel")]
	public partial class AcademicLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAcadLevel;
		
		private string _AcadLevelName;
		
		private string _AcadLevelShort;
		
		private System.Nullable<int> _AcadLevelSort;
		
		private EntitySet<Curriculum> _Curriculums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAcadLevelChanging(int value);
    partial void OnidAcadLevelChanged();
    partial void OnAcadLevelNameChanging(string value);
    partial void OnAcadLevelNameChanged();
    partial void OnAcadLevelShortChanging(string value);
    partial void OnAcadLevelShortChanged();
    partial void OnAcadLevelSortChanging(System.Nullable<int> value);
    partial void OnAcadLevelSortChanged();
    #endregion
		
		public AcademicLevel()
		{
			this._Curriculums = new EntitySet<Curriculum>(new Action<Curriculum>(this.attach_Curriculums), new Action<Curriculum>(this.detach_Curriculums));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAcadLevel", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAcadLevel
		{
			get
			{
				return this._idAcadLevel;
			}
			set
			{
				if ((this._idAcadLevel != value))
				{
					this.OnidAcadLevelChanging(value);
					this.SendPropertyChanging();
					this._idAcadLevel = value;
					this.SendPropertyChanged("idAcadLevel");
					this.OnidAcadLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcadLevelName", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string AcadLevelName
		{
			get
			{
				return this._AcadLevelName;
			}
			set
			{
				if ((this._AcadLevelName != value))
				{
					this.OnAcadLevelNameChanging(value);
					this.SendPropertyChanging();
					this._AcadLevelName = value;
					this.SendPropertyChanged("AcadLevelName");
					this.OnAcadLevelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcadLevelShort", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string AcadLevelShort
		{
			get
			{
				return this._AcadLevelShort;
			}
			set
			{
				if ((this._AcadLevelShort != value))
				{
					this.OnAcadLevelShortChanging(value);
					this.SendPropertyChanging();
					this._AcadLevelShort = value;
					this.SendPropertyChanged("AcadLevelShort");
					this.OnAcadLevelShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcadLevelSort", DbType="Int")]
		public System.Nullable<int> AcadLevelSort
		{
			get
			{
				return this._AcadLevelSort;
			}
			set
			{
				if ((this._AcadLevelSort != value))
				{
					this.OnAcadLevelSortChanging(value);
					this.SendPropertyChanging();
					this._AcadLevelSort = value;
					this.SendPropertyChanged("AcadLevelSort");
					this.OnAcadLevelSortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicLevel_Curriculum", Storage="_Curriculums", ThisKey="idAcadLevel", OtherKey="AcademiclLevel_idAcadLevel")]
		public EntitySet<Curriculum> Curriculums
		{
			get
			{
				return this._Curriculums;
			}
			set
			{
				this._Curriculums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Curriculums(Curriculum entity)
		{
			this.SendPropertyChanging();
			entity.AcademicLevel = this;
		}
		
		private void detach_Curriculums(Curriculum entity)
		{
			this.SendPropertyChanging();
			entity.AcademicLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitStatus")]
	public partial class UnitStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUnitStatus;
		
		private string _UnitStatusName;
		
		private EntitySet<CourseUnit> _CourseUnits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUnitStatusChanging(int value);
    partial void OnidUnitStatusChanged();
    partial void OnUnitStatusNameChanging(string value);
    partial void OnUnitStatusNameChanged();
    #endregion
		
		public UnitStatus()
		{
			this._CourseUnits = new EntitySet<CourseUnit>(new Action<CourseUnit>(this.attach_CourseUnits), new Action<CourseUnit>(this.detach_CourseUnits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUnitStatus", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUnitStatus
		{
			get
			{
				return this._idUnitStatus;
			}
			set
			{
				if ((this._idUnitStatus != value))
				{
					this.OnidUnitStatusChanging(value);
					this.SendPropertyChanging();
					this._idUnitStatus = value;
					this.SendPropertyChanged("idUnitStatus");
					this.OnidUnitStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitStatusName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string UnitStatusName
		{
			get
			{
				return this._UnitStatusName;
			}
			set
			{
				if ((this._UnitStatusName != value))
				{
					this.OnUnitStatusNameChanging(value);
					this.SendPropertyChanging();
					this._UnitStatusName = value;
					this.SendPropertyChanged("UnitStatusName");
					this.OnUnitStatusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitStatus_CourseUnit", Storage="_CourseUnits", ThisKey="idUnitStatus", OtherKey="UnitStatus_idUnitStatus")]
		public EntitySet<CourseUnit> CourseUnits
		{
			get
			{
				return this._CourseUnits;
			}
			set
			{
				this._CourseUnits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseUnits(CourseUnit entity)
		{
			this.SendPropertyChanging();
			entity.UnitStatus = this;
		}
		
		private void detach_CourseUnits(CourseUnit entity)
		{
			this.SendPropertyChanging();
			entity.UnitStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Assessment")]
	public partial class Assessment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAssessment;
		
		private int _AssessmentType_idAssessmentType;
		
		private string _AssessmentName;
		
		private string _AssessmentCode;
		
		private string _Assessment_AssessmentScenario;
		
		private System.Nullable<int> _SystemUser_idSystemUser;
		
		private System.Nullable<int> _Course_idCourse;
		
		private EntitySet<AssessmentTask> _AssessmentTasks;
		
		private EntitySet<UnitsAssessed> _UnitsAssesseds;
		
		private EntityRef<AssessmentType> _AssessmentType;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<SystemUser> _SystemUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAssessmentChanging(int value);
    partial void OnidAssessmentChanged();
    partial void OnAssessmentType_idAssessmentTypeChanging(int value);
    partial void OnAssessmentType_idAssessmentTypeChanged();
    partial void OnAssessmentNameChanging(string value);
    partial void OnAssessmentNameChanged();
    partial void OnAssessmentCodeChanging(string value);
    partial void OnAssessmentCodeChanged();
    partial void OnAssessment_AssessmentScenarioChanging(string value);
    partial void OnAssessment_AssessmentScenarioChanged();
    partial void OnSystemUser_idSystemUserChanging(System.Nullable<int> value);
    partial void OnSystemUser_idSystemUserChanged();
    partial void OnCourse_idCourseChanging(System.Nullable<int> value);
    partial void OnCourse_idCourseChanged();
    #endregion
		
		public Assessment()
		{
			this._AssessmentTasks = new EntitySet<AssessmentTask>(new Action<AssessmentTask>(this.attach_AssessmentTasks), new Action<AssessmentTask>(this.detach_AssessmentTasks));
			this._UnitsAssesseds = new EntitySet<UnitsAssessed>(new Action<UnitsAssessed>(this.attach_UnitsAssesseds), new Action<UnitsAssessed>(this.detach_UnitsAssesseds));
			this._AssessmentType = default(EntityRef<AssessmentType>);
			this._Course = default(EntityRef<Course>);
			this._SystemUser = default(EntityRef<SystemUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAssessment", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAssessment
		{
			get
			{
				return this._idAssessment;
			}
			set
			{
				if ((this._idAssessment != value))
				{
					this.OnidAssessmentChanging(value);
					this.SendPropertyChanging();
					this._idAssessment = value;
					this.SendPropertyChanged("idAssessment");
					this.OnidAssessmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentType_idAssessmentType", DbType="Int NOT NULL")]
		public int AssessmentType_idAssessmentType
		{
			get
			{
				return this._AssessmentType_idAssessmentType;
			}
			set
			{
				if ((this._AssessmentType_idAssessmentType != value))
				{
					if (this._AssessmentType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentType_idAssessmentTypeChanging(value);
					this.SendPropertyChanging();
					this._AssessmentType_idAssessmentType = value;
					this.SendPropertyChanged("AssessmentType_idAssessmentType");
					this.OnAssessmentType_idAssessmentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssessmentName
		{
			get
			{
				return this._AssessmentName;
			}
			set
			{
				if ((this._AssessmentName != value))
				{
					this.OnAssessmentNameChanging(value);
					this.SendPropertyChanging();
					this._AssessmentName = value;
					this.SendPropertyChanged("AssessmentName");
					this.OnAssessmentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentCode", DbType="VarChar(45)")]
		public string AssessmentCode
		{
			get
			{
				return this._AssessmentCode;
			}
			set
			{
				if ((this._AssessmentCode != value))
				{
					this.OnAssessmentCodeChanging(value);
					this.SendPropertyChanging();
					this._AssessmentCode = value;
					this.SendPropertyChanged("AssessmentCode");
					this.OnAssessmentCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assessment_AssessmentScenario", DbType="VarChar(MAX)")]
		public string Assessment_AssessmentScenario
		{
			get
			{
				return this._Assessment_AssessmentScenario;
			}
			set
			{
				if ((this._Assessment_AssessmentScenario != value))
				{
					this.OnAssessment_AssessmentScenarioChanging(value);
					this.SendPropertyChanging();
					this._Assessment_AssessmentScenario = value;
					this.SendPropertyChanged("Assessment_AssessmentScenario");
					this.OnAssessment_AssessmentScenarioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUser_idSystemUser", DbType="Int")]
		public System.Nullable<int> SystemUser_idSystemUser
		{
			get
			{
				return this._SystemUser_idSystemUser;
			}
			set
			{
				if ((this._SystemUser_idSystemUser != value))
				{
					if (this._SystemUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemUser_idSystemUserChanging(value);
					this.SendPropertyChanging();
					this._SystemUser_idSystemUser = value;
					this.SendPropertyChanged("SystemUser_idSystemUser");
					this.OnSystemUser_idSystemUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_idCourse", DbType="Int")]
		public System.Nullable<int> Course_idCourse
		{
			get
			{
				return this._Course_idCourse;
			}
			set
			{
				if ((this._Course_idCourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourse_idCourseChanging(value);
					this.SendPropertyChanging();
					this._Course_idCourse = value;
					this.SendPropertyChanged("Course_idCourse");
					this.OnCourse_idCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assessment_AssessmentTask", Storage="_AssessmentTasks", ThisKey="idAssessment", OtherKey="Assessment_idAssessment")]
		public EntitySet<AssessmentTask> AssessmentTasks
		{
			get
			{
				return this._AssessmentTasks;
			}
			set
			{
				this._AssessmentTasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assessment_UnitsAssessed", Storage="_UnitsAssesseds", ThisKey="idAssessment", OtherKey="Assessment_idAssessment")]
		public EntitySet<UnitsAssessed> UnitsAssesseds
		{
			get
			{
				return this._UnitsAssesseds;
			}
			set
			{
				this._UnitsAssesseds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentType_Assessment", Storage="_AssessmentType", ThisKey="AssessmentType_idAssessmentType", OtherKey="idAssessmentType", IsForeignKey=true)]
		public AssessmentType AssessmentType
		{
			get
			{
				return this._AssessmentType.Entity;
			}
			set
			{
				AssessmentType previousValue = this._AssessmentType.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentType.Entity = null;
						previousValue.Assessments.Remove(this);
					}
					this._AssessmentType.Entity = value;
					if ((value != null))
					{
						value.Assessments.Add(this);
						this._AssessmentType_idAssessmentType = value.idAssessmentType;
					}
					else
					{
						this._AssessmentType_idAssessmentType = default(int);
					}
					this.SendPropertyChanged("AssessmentType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Assessment", Storage="_Course", ThisKey="Course_idCourse", OtherKey="idCourse", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Assessments.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Assessments.Add(this);
						this._Course_idCourse = value.idCourse;
					}
					else
					{
						this._Course_idCourse = default(Nullable<int>);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Assessment", Storage="_SystemUser", ThisKey="SystemUser_idSystemUser", OtherKey="idSystemUser", IsForeignKey=true)]
		public SystemUser SystemUser
		{
			get
			{
				return this._SystemUser.Entity;
			}
			set
			{
				SystemUser previousValue = this._SystemUser.Entity;
				if (((previousValue != value) 
							|| (this._SystemUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUser.Entity = null;
						previousValue.Assessments.Remove(this);
					}
					this._SystemUser.Entity = value;
					if ((value != null))
					{
						value.Assessments.Add(this);
						this._SystemUser_idSystemUser = value.idSystemUser;
					}
					else
					{
						this._SystemUser_idSystemUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssessmentTasks(AssessmentTask entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = this;
		}
		
		private void detach_AssessmentTasks(AssessmentTask entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = null;
		}
		
		private void attach_UnitsAssesseds(UnitsAssessed entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = this;
		}
		
		private void detach_UnitsAssesseds(UnitsAssessed entity)
		{
			this.SendPropertyChanging();
			entity.Assessment = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssessmentObjective")]
	public partial class AssessmentObjective : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAssessmentObjective;
		
		private string _AOShort;
		
		private string _AOName;
		
		private System.Nullable<int> _AOSortOrder;
		
		private string _AOFocus;
		
		private EntitySet<TaskAO> _TaskAOs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAssessmentObjectiveChanging(int value);
    partial void OnidAssessmentObjectiveChanged();
    partial void OnAOShortChanging(string value);
    partial void OnAOShortChanged();
    partial void OnAONameChanging(string value);
    partial void OnAONameChanged();
    partial void OnAOSortOrderChanging(System.Nullable<int> value);
    partial void OnAOSortOrderChanged();
    partial void OnAOFocusChanging(string value);
    partial void OnAOFocusChanged();
    #endregion
		
		public AssessmentObjective()
		{
			this._TaskAOs = new EntitySet<TaskAO>(new Action<TaskAO>(this.attach_TaskAOs), new Action<TaskAO>(this.detach_TaskAOs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAssessmentObjective", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAssessmentObjective
		{
			get
			{
				return this._idAssessmentObjective;
			}
			set
			{
				if ((this._idAssessmentObjective != value))
				{
					this.OnidAssessmentObjectiveChanging(value);
					this.SendPropertyChanging();
					this._idAssessmentObjective = value;
					this.SendPropertyChanged("idAssessmentObjective");
					this.OnidAssessmentObjectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AOShort", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string AOShort
		{
			get
			{
				return this._AOShort;
			}
			set
			{
				if ((this._AOShort != value))
				{
					this.OnAOShortChanging(value);
					this.SendPropertyChanging();
					this._AOShort = value;
					this.SendPropertyChanged("AOShort");
					this.OnAOShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AOName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AOName
		{
			get
			{
				return this._AOName;
			}
			set
			{
				if ((this._AOName != value))
				{
					this.OnAONameChanging(value);
					this.SendPropertyChanging();
					this._AOName = value;
					this.SendPropertyChanged("AOName");
					this.OnAONameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AOSortOrder", DbType="Int")]
		public System.Nullable<int> AOSortOrder
		{
			get
			{
				return this._AOSortOrder;
			}
			set
			{
				if ((this._AOSortOrder != value))
				{
					this.OnAOSortOrderChanging(value);
					this.SendPropertyChanging();
					this._AOSortOrder = value;
					this.SendPropertyChanged("AOSortOrder");
					this.OnAOSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AOFocus", DbType="VarChar(MAX)")]
		public string AOFocus
		{
			get
			{
				return this._AOFocus;
			}
			set
			{
				if ((this._AOFocus != value))
				{
					this.OnAOFocusChanging(value);
					this.SendPropertyChanging();
					this._AOFocus = value;
					this.SendPropertyChanged("AOFocus");
					this.OnAOFocusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentObjective_TaskAO", Storage="_TaskAOs", ThisKey="idAssessmentObjective", OtherKey="AssessmentObjective_idAssessmentObjective")]
		public EntitySet<TaskAO> TaskAOs
		{
			get
			{
				return this._TaskAOs;
			}
			set
			{
				this._TaskAOs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskAOs(TaskAO entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentObjective = this;
		}
		
		private void detach_TaskAOs(TaskAO entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentObjective = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssessmentTask")]
	public partial class AssessmentTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAssessmentTask;
		
		private int _Assessment_idAssessment;
		
		private int _TaskOrderNumber;
		
		private string _AssessTaskName;
		
		private string _CandidateInstructions;
		
		private string _EvidenceRequired;
		
		private string _CentreGuidance;
		
		private int _AssessmentTaskCondition_idAssessmentTaskCondition;
		
		private System.Nullable<decimal> _AssessmentTask_TaskTimeEstimate;
		
		private EntitySet<TaskAO> _TaskAOs;
		
		private EntitySet<TaskKeyword> _TaskKeywords;
		
		private EntitySet<TaskTopicRange> _TaskTopicRanges;
		
		private EntityRef<Assessment> _Assessment;
		
		private EntityRef<AssessmentTaskCondition> _AssessmentTaskCondition;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAssessmentTaskChanging(int value);
    partial void OnidAssessmentTaskChanged();
    partial void OnAssessment_idAssessmentChanging(int value);
    partial void OnAssessment_idAssessmentChanged();
    partial void OnTaskOrderNumberChanging(int value);
    partial void OnTaskOrderNumberChanged();
    partial void OnAssessTaskNameChanging(string value);
    partial void OnAssessTaskNameChanged();
    partial void OnCandidateInstructionsChanging(string value);
    partial void OnCandidateInstructionsChanged();
    partial void OnEvidenceRequiredChanging(string value);
    partial void OnEvidenceRequiredChanged();
    partial void OnCentreGuidanceChanging(string value);
    partial void OnCentreGuidanceChanged();
    partial void OnAssessmentTaskCondition_idAssessmentTaskConditionChanging(int value);
    partial void OnAssessmentTaskCondition_idAssessmentTaskConditionChanged();
    partial void OnAssessmentTask_TaskTimeEstimateChanging(System.Nullable<decimal> value);
    partial void OnAssessmentTask_TaskTimeEstimateChanged();
    #endregion
		
		public AssessmentTask()
		{
			this._TaskAOs = new EntitySet<TaskAO>(new Action<TaskAO>(this.attach_TaskAOs), new Action<TaskAO>(this.detach_TaskAOs));
			this._TaskKeywords = new EntitySet<TaskKeyword>(new Action<TaskKeyword>(this.attach_TaskKeywords), new Action<TaskKeyword>(this.detach_TaskKeywords));
			this._TaskTopicRanges = new EntitySet<TaskTopicRange>(new Action<TaskTopicRange>(this.attach_TaskTopicRanges), new Action<TaskTopicRange>(this.detach_TaskTopicRanges));
			this._Assessment = default(EntityRef<Assessment>);
			this._AssessmentTaskCondition = default(EntityRef<AssessmentTaskCondition>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAssessmentTask", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAssessmentTask
		{
			get
			{
				return this._idAssessmentTask;
			}
			set
			{
				if ((this._idAssessmentTask != value))
				{
					this.OnidAssessmentTaskChanging(value);
					this.SendPropertyChanging();
					this._idAssessmentTask = value;
					this.SendPropertyChanged("idAssessmentTask");
					this.OnidAssessmentTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assessment_idAssessment", DbType="Int NOT NULL")]
		public int Assessment_idAssessment
		{
			get
			{
				return this._Assessment_idAssessment;
			}
			set
			{
				if ((this._Assessment_idAssessment != value))
				{
					if (this._Assessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessment_idAssessmentChanging(value);
					this.SendPropertyChanging();
					this._Assessment_idAssessment = value;
					this.SendPropertyChanged("Assessment_idAssessment");
					this.OnAssessment_idAssessmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaskOrderNumber", DbType="Int NOT NULL")]
		public int TaskOrderNumber
		{
			get
			{
				return this._TaskOrderNumber;
			}
			set
			{
				if ((this._TaskOrderNumber != value))
				{
					this.OnTaskOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._TaskOrderNumber = value;
					this.SendPropertyChanged("TaskOrderNumber");
					this.OnTaskOrderNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessTaskName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssessTaskName
		{
			get
			{
				return this._AssessTaskName;
			}
			set
			{
				if ((this._AssessTaskName != value))
				{
					this.OnAssessTaskNameChanging(value);
					this.SendPropertyChanging();
					this._AssessTaskName = value;
					this.SendPropertyChanged("AssessTaskName");
					this.OnAssessTaskNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CandidateInstructions", DbType="VarChar(MAX)")]
		public string CandidateInstructions
		{
			get
			{
				return this._CandidateInstructions;
			}
			set
			{
				if ((this._CandidateInstructions != value))
				{
					this.OnCandidateInstructionsChanging(value);
					this.SendPropertyChanging();
					this._CandidateInstructions = value;
					this.SendPropertyChanged("CandidateInstructions");
					this.OnCandidateInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvidenceRequired", DbType="VarChar(MAX)")]
		public string EvidenceRequired
		{
			get
			{
				return this._EvidenceRequired;
			}
			set
			{
				if ((this._EvidenceRequired != value))
				{
					this.OnEvidenceRequiredChanging(value);
					this.SendPropertyChanging();
					this._EvidenceRequired = value;
					this.SendPropertyChanged("EvidenceRequired");
					this.OnEvidenceRequiredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CentreGuidance", DbType="VarChar(MAX)")]
		public string CentreGuidance
		{
			get
			{
				return this._CentreGuidance;
			}
			set
			{
				if ((this._CentreGuidance != value))
				{
					this.OnCentreGuidanceChanging(value);
					this.SendPropertyChanging();
					this._CentreGuidance = value;
					this.SendPropertyChanged("CentreGuidance");
					this.OnCentreGuidanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTaskCondition_idAssessmentTaskCondition", DbType="Int NOT NULL")]
		public int AssessmentTaskCondition_idAssessmentTaskCondition
		{
			get
			{
				return this._AssessmentTaskCondition_idAssessmentTaskCondition;
			}
			set
			{
				if ((this._AssessmentTaskCondition_idAssessmentTaskCondition != value))
				{
					if (this._AssessmentTaskCondition.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentTaskCondition_idAssessmentTaskConditionChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTaskCondition_idAssessmentTaskCondition = value;
					this.SendPropertyChanged("AssessmentTaskCondition_idAssessmentTaskCondition");
					this.OnAssessmentTaskCondition_idAssessmentTaskConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTask_TaskTimeEstimate", DbType="Decimal(5,2)")]
		public System.Nullable<decimal> AssessmentTask_TaskTimeEstimate
		{
			get
			{
				return this._AssessmentTask_TaskTimeEstimate;
			}
			set
			{
				if ((this._AssessmentTask_TaskTimeEstimate != value))
				{
					this.OnAssessmentTask_TaskTimeEstimateChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTask_TaskTimeEstimate = value;
					this.SendPropertyChanged("AssessmentTask_TaskTimeEstimate");
					this.OnAssessmentTask_TaskTimeEstimateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTask_TaskAO", Storage="_TaskAOs", ThisKey="idAssessmentTask", OtherKey="AssessmentTask_idAssessmentTask")]
		public EntitySet<TaskAO> TaskAOs
		{
			get
			{
				return this._TaskAOs;
			}
			set
			{
				this._TaskAOs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTask_TaskKeyword", Storage="_TaskKeywords", ThisKey="idAssessmentTask", OtherKey="AssessmentTask_idAssessmentTask")]
		public EntitySet<TaskKeyword> TaskKeywords
		{
			get
			{
				return this._TaskKeywords;
			}
			set
			{
				this._TaskKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTask_TaskTopicRange", Storage="_TaskTopicRanges", ThisKey="idAssessmentTask", OtherKey="AssessmentTask_idAssessmentTask")]
		public EntitySet<TaskTopicRange> TaskTopicRanges
		{
			get
			{
				return this._TaskTopicRanges;
			}
			set
			{
				this._TaskTopicRanges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assessment_AssessmentTask", Storage="_Assessment", ThisKey="Assessment_idAssessment", OtherKey="idAssessment", IsForeignKey=true)]
		public Assessment Assessment
		{
			get
			{
				return this._Assessment.Entity;
			}
			set
			{
				Assessment previousValue = this._Assessment.Entity;
				if (((previousValue != value) 
							|| (this._Assessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assessment.Entity = null;
						previousValue.AssessmentTasks.Remove(this);
					}
					this._Assessment.Entity = value;
					if ((value != null))
					{
						value.AssessmentTasks.Add(this);
						this._Assessment_idAssessment = value.idAssessment;
					}
					else
					{
						this._Assessment_idAssessment = default(int);
					}
					this.SendPropertyChanged("Assessment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTaskCondition_AssessmentTask", Storage="_AssessmentTaskCondition", ThisKey="AssessmentTaskCondition_idAssessmentTaskCondition", OtherKey="idAssessmentTaskCondition", IsForeignKey=true)]
		public AssessmentTaskCondition AssessmentTaskCondition
		{
			get
			{
				return this._AssessmentTaskCondition.Entity;
			}
			set
			{
				AssessmentTaskCondition previousValue = this._AssessmentTaskCondition.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentTaskCondition.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentTaskCondition.Entity = null;
						previousValue.AssessmentTasks.Remove(this);
					}
					this._AssessmentTaskCondition.Entity = value;
					if ((value != null))
					{
						value.AssessmentTasks.Add(this);
						this._AssessmentTaskCondition_idAssessmentTaskCondition = value.idAssessmentTaskCondition;
					}
					else
					{
						this._AssessmentTaskCondition_idAssessmentTaskCondition = default(int);
					}
					this.SendPropertyChanged("AssessmentTaskCondition");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskAOs(TaskAO entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTask = this;
		}
		
		private void detach_TaskAOs(TaskAO entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTask = null;
		}
		
		private void attach_TaskKeywords(TaskKeyword entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTask = this;
		}
		
		private void detach_TaskKeywords(TaskKeyword entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTask = null;
		}
		
		private void attach_TaskTopicRanges(TaskTopicRange entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTask = this;
		}
		
		private void detach_TaskTopicRanges(TaskTopicRange entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTask = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssessmentTaskCondition")]
	public partial class AssessmentTaskCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAssessmentTaskCondition;
		
		private string _AssessTaskConditionFull;
		
		private string _AssessTaskConditionShort;
		
		private EntitySet<AssessmentTask> _AssessmentTasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAssessmentTaskConditionChanging(int value);
    partial void OnidAssessmentTaskConditionChanged();
    partial void OnAssessTaskConditionFullChanging(string value);
    partial void OnAssessTaskConditionFullChanged();
    partial void OnAssessTaskConditionShortChanging(string value);
    partial void OnAssessTaskConditionShortChanged();
    #endregion
		
		public AssessmentTaskCondition()
		{
			this._AssessmentTasks = new EntitySet<AssessmentTask>(new Action<AssessmentTask>(this.attach_AssessmentTasks), new Action<AssessmentTask>(this.detach_AssessmentTasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAssessmentTaskCondition", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAssessmentTaskCondition
		{
			get
			{
				return this._idAssessmentTaskCondition;
			}
			set
			{
				if ((this._idAssessmentTaskCondition != value))
				{
					this.OnidAssessmentTaskConditionChanging(value);
					this.SendPropertyChanging();
					this._idAssessmentTaskCondition = value;
					this.SendPropertyChanged("idAssessmentTaskCondition");
					this.OnidAssessmentTaskConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessTaskConditionFull", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssessTaskConditionFull
		{
			get
			{
				return this._AssessTaskConditionFull;
			}
			set
			{
				if ((this._AssessTaskConditionFull != value))
				{
					this.OnAssessTaskConditionFullChanging(value);
					this.SendPropertyChanging();
					this._AssessTaskConditionFull = value;
					this.SendPropertyChanged("AssessTaskConditionFull");
					this.OnAssessTaskConditionFullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessTaskConditionShort", DbType="VarChar(20)")]
		public string AssessTaskConditionShort
		{
			get
			{
				return this._AssessTaskConditionShort;
			}
			set
			{
				if ((this._AssessTaskConditionShort != value))
				{
					this.OnAssessTaskConditionShortChanging(value);
					this.SendPropertyChanging();
					this._AssessTaskConditionShort = value;
					this.SendPropertyChanged("AssessTaskConditionShort");
					this.OnAssessTaskConditionShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTaskCondition_AssessmentTask", Storage="_AssessmentTasks", ThisKey="idAssessmentTaskCondition", OtherKey="AssessmentTaskCondition_idAssessmentTaskCondition")]
		public EntitySet<AssessmentTask> AssessmentTasks
		{
			get
			{
				return this._AssessmentTasks;
			}
			set
			{
				this._AssessmentTasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AssessmentTasks(AssessmentTask entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTaskCondition = this;
		}
		
		private void detach_AssessmentTasks(AssessmentTask entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentTaskCondition = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AssessmentType")]
	public partial class AssessmentType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idAssessmentType;
		
		private string _AssessmentTypeName;
		
		private EntitySet<Assessment> _Assessments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidAssessmentTypeChanging(int value);
    partial void OnidAssessmentTypeChanged();
    partial void OnAssessmentTypeNameChanging(string value);
    partial void OnAssessmentTypeNameChanged();
    #endregion
		
		public AssessmentType()
		{
			this._Assessments = new EntitySet<Assessment>(new Action<Assessment>(this.attach_Assessments), new Action<Assessment>(this.detach_Assessments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAssessmentType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idAssessmentType
		{
			get
			{
				return this._idAssessmentType;
			}
			set
			{
				if ((this._idAssessmentType != value))
				{
					this.OnidAssessmentTypeChanging(value);
					this.SendPropertyChanging();
					this._idAssessmentType = value;
					this.SendPropertyChanged("idAssessmentType");
					this.OnidAssessmentTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTypeName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string AssessmentTypeName
		{
			get
			{
				return this._AssessmentTypeName;
			}
			set
			{
				if ((this._AssessmentTypeName != value))
				{
					this.OnAssessmentTypeNameChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTypeName = value;
					this.SendPropertyChanged("AssessmentTypeName");
					this.OnAssessmentTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentType_Assessment", Storage="_Assessments", ThisKey="idAssessmentType", OtherKey="AssessmentType_idAssessmentType")]
		public EntitySet<Assessment> Assessments
		{
			get
			{
				return this._Assessments;
			}
			set
			{
				this._Assessments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentType = this;
		}
		
		private void detach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.AssessmentType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCourse;
		
		private int _QualificationPathway_idQualificationPathway;
		
		private string _CourseName;
		
		private EntitySet<Assessment> _Assessments;
		
		private EntitySet<CourseUnit> _CourseUnits;
		
		private EntityRef<QualificationPathway> _QualificationPathway;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCourseChanging(int value);
    partial void OnidCourseChanged();
    partial void OnQualificationPathway_idQualificationPathwayChanging(int value);
    partial void OnQualificationPathway_idQualificationPathwayChanged();
    partial void OnCourseNameChanging(string value);
    partial void OnCourseNameChanged();
    #endregion
		
		public Course()
		{
			this._Assessments = new EntitySet<Assessment>(new Action<Assessment>(this.attach_Assessments), new Action<Assessment>(this.detach_Assessments));
			this._CourseUnits = new EntitySet<CourseUnit>(new Action<CourseUnit>(this.attach_CourseUnits), new Action<CourseUnit>(this.detach_CourseUnits));
			this._QualificationPathway = default(EntityRef<QualificationPathway>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourse", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCourse
		{
			get
			{
				return this._idCourse;
			}
			set
			{
				if ((this._idCourse != value))
				{
					this.OnidCourseChanging(value);
					this.SendPropertyChanging();
					this._idCourse = value;
					this.SendPropertyChanged("idCourse");
					this.OnidCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualificationPathway_idQualificationPathway", DbType="Int NOT NULL")]
		public int QualificationPathway_idQualificationPathway
		{
			get
			{
				return this._QualificationPathway_idQualificationPathway;
			}
			set
			{
				if ((this._QualificationPathway_idQualificationPathway != value))
				{
					if (this._QualificationPathway.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualificationPathway_idQualificationPathwayChanging(value);
					this.SendPropertyChanging();
					this._QualificationPathway_idQualificationPathway = value;
					this.SendPropertyChanged("QualificationPathway_idQualificationPathway");
					this.OnQualificationPathway_idQualificationPathwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this.OnCourseNameChanging(value);
					this.SendPropertyChanging();
					this._CourseName = value;
					this.SendPropertyChanged("CourseName");
					this.OnCourseNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Assessment", Storage="_Assessments", ThisKey="idCourse", OtherKey="Course_idCourse")]
		public EntitySet<Assessment> Assessments
		{
			get
			{
				return this._Assessments;
			}
			set
			{
				this._Assessments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseUnit", Storage="_CourseUnits", ThisKey="idCourse", OtherKey="Course_idCourse")]
		public EntitySet<CourseUnit> CourseUnits
		{
			get
			{
				return this._CourseUnits;
			}
			set
			{
				this._CourseUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualificationPathway_Course", Storage="_QualificationPathway", ThisKey="QualificationPathway_idQualificationPathway", OtherKey="idQualificationPathway", IsForeignKey=true)]
		public QualificationPathway QualificationPathway
		{
			get
			{
				return this._QualificationPathway.Entity;
			}
			set
			{
				QualificationPathway previousValue = this._QualificationPathway.Entity;
				if (((previousValue != value) 
							|| (this._QualificationPathway.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualificationPathway.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._QualificationPathway.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._QualificationPathway_idQualificationPathway = value.idQualificationPathway;
					}
					else
					{
						this._QualificationPathway_idQualificationPathway = default(int);
					}
					this.SendPropertyChanged("QualificationPathway");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_CourseUnits(CourseUnit entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseUnits(CourseUnit entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseUnit")]
	public partial class CourseUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCourseUnit;
		
		private int _UnitStatus_idUnitStatus;
		
		private int _Course_idCourse;
		
		private int _QualUnit_idQualUnit;
		
		private string _CourseUnitTitle;
		
		private EntitySet<UnitsAssessed> _UnitsAssesseds;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<UnitStatus> _UnitStatus;
		
		private EntityRef<QualUnit> _QualUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCourseUnitChanging(int value);
    partial void OnidCourseUnitChanged();
    partial void OnUnitStatus_idUnitStatusChanging(int value);
    partial void OnUnitStatus_idUnitStatusChanged();
    partial void OnCourse_idCourseChanging(int value);
    partial void OnCourse_idCourseChanged();
    partial void OnQualUnit_idQualUnitChanging(int value);
    partial void OnQualUnit_idQualUnitChanged();
    partial void OnCourseUnitTitleChanging(string value);
    partial void OnCourseUnitTitleChanged();
    #endregion
		
		public CourseUnit()
		{
			this._UnitsAssesseds = new EntitySet<UnitsAssessed>(new Action<UnitsAssessed>(this.attach_UnitsAssesseds), new Action<UnitsAssessed>(this.detach_UnitsAssesseds));
			this._Course = default(EntityRef<Course>);
			this._UnitStatus = default(EntityRef<UnitStatus>);
			this._QualUnit = default(EntityRef<QualUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourseUnit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCourseUnit
		{
			get
			{
				return this._idCourseUnit;
			}
			set
			{
				if ((this._idCourseUnit != value))
				{
					this.OnidCourseUnitChanging(value);
					this.SendPropertyChanging();
					this._idCourseUnit = value;
					this.SendPropertyChanged("idCourseUnit");
					this.OnidCourseUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitStatus_idUnitStatus", DbType="Int NOT NULL")]
		public int UnitStatus_idUnitStatus
		{
			get
			{
				return this._UnitStatus_idUnitStatus;
			}
			set
			{
				if ((this._UnitStatus_idUnitStatus != value))
				{
					if (this._UnitStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitStatus_idUnitStatusChanging(value);
					this.SendPropertyChanging();
					this._UnitStatus_idUnitStatus = value;
					this.SendPropertyChanged("UnitStatus_idUnitStatus");
					this.OnUnitStatus_idUnitStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_idCourse", DbType="Int NOT NULL")]
		public int Course_idCourse
		{
			get
			{
				return this._Course_idCourse;
			}
			set
			{
				if ((this._Course_idCourse != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourse_idCourseChanging(value);
					this.SendPropertyChanging();
					this._Course_idCourse = value;
					this.SendPropertyChanged("Course_idCourse");
					this.OnCourse_idCourseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnit_idQualUnit", DbType="Int NOT NULL")]
		public int QualUnit_idQualUnit
		{
			get
			{
				return this._QualUnit_idQualUnit;
			}
			set
			{
				if ((this._QualUnit_idQualUnit != value))
				{
					if (this._QualUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualUnit_idQualUnitChanging(value);
					this.SendPropertyChanging();
					this._QualUnit_idQualUnit = value;
					this.SendPropertyChanged("QualUnit_idQualUnit");
					this.OnQualUnit_idQualUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseUnitTitle", DbType="VarChar(255)")]
		public string CourseUnitTitle
		{
			get
			{
				return this._CourseUnitTitle;
			}
			set
			{
				if ((this._CourseUnitTitle != value))
				{
					this.OnCourseUnitTitleChanging(value);
					this.SendPropertyChanging();
					this._CourseUnitTitle = value;
					this.SendPropertyChanged("CourseUnitTitle");
					this.OnCourseUnitTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseUnit_UnitsAssessed", Storage="_UnitsAssesseds", ThisKey="idCourseUnit", OtherKey="CourseUnit_idCourseUnit")]
		public EntitySet<UnitsAssessed> UnitsAssesseds
		{
			get
			{
				return this._UnitsAssesseds;
			}
			set
			{
				this._UnitsAssesseds.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseUnit", Storage="_Course", ThisKey="Course_idCourse", OtherKey="idCourse", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseUnits.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseUnits.Add(this);
						this._Course_idCourse = value.idCourse;
					}
					else
					{
						this._Course_idCourse = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitStatus_CourseUnit", Storage="_UnitStatus", ThisKey="UnitStatus_idUnitStatus", OtherKey="idUnitStatus", IsForeignKey=true)]
		public UnitStatus UnitStatus
		{
			get
			{
				return this._UnitStatus.Entity;
			}
			set
			{
				UnitStatus previousValue = this._UnitStatus.Entity;
				if (((previousValue != value) 
							|| (this._UnitStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitStatus.Entity = null;
						previousValue.CourseUnits.Remove(this);
					}
					this._UnitStatus.Entity = value;
					if ((value != null))
					{
						value.CourseUnits.Add(this);
						this._UnitStatus_idUnitStatus = value.idUnitStatus;
					}
					else
					{
						this._UnitStatus_idUnitStatus = default(int);
					}
					this.SendPropertyChanged("UnitStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualUnit_CourseUnit", Storage="_QualUnit", ThisKey="QualUnit_idQualUnit", OtherKey="idQualUnit", IsForeignKey=true)]
		public QualUnit QualUnit
		{
			get
			{
				return this._QualUnit.Entity;
			}
			set
			{
				QualUnit previousValue = this._QualUnit.Entity;
				if (((previousValue != value) 
							|| (this._QualUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualUnit.Entity = null;
						previousValue.CourseUnits.Remove(this);
					}
					this._QualUnit.Entity = value;
					if ((value != null))
					{
						value.CourseUnits.Add(this);
						this._QualUnit_idQualUnit = value.idQualUnit;
					}
					else
					{
						this._QualUnit_idQualUnit = default(int);
					}
					this.SendPropertyChanged("QualUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UnitsAssesseds(UnitsAssessed entity)
		{
			this.SendPropertyChanging();
			entity.CourseUnit = this;
		}
		
		private void detach_UnitsAssesseds(UnitsAssessed entity)
		{
			this.SendPropertyChanging();
			entity.CourseUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Curriculum")]
	public partial class Curriculum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idCurriculum;
		
		private int _AcademiclLevel_idAcadLevel;
		
		private string _CurriculumName;
		
		private EntitySet<Qualification> _Qualifications;
		
		private EntityRef<AcademicLevel> _AcademicLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidCurriculumChanging(int value);
    partial void OnidCurriculumChanged();
    partial void OnAcademiclLevel_idAcadLevelChanging(int value);
    partial void OnAcademiclLevel_idAcadLevelChanged();
    partial void OnCurriculumNameChanging(string value);
    partial void OnCurriculumNameChanged();
    #endregion
		
		public Curriculum()
		{
			this._Qualifications = new EntitySet<Qualification>(new Action<Qualification>(this.attach_Qualifications), new Action<Qualification>(this.detach_Qualifications));
			this._AcademicLevel = default(EntityRef<AcademicLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCurriculum", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idCurriculum
		{
			get
			{
				return this._idCurriculum;
			}
			set
			{
				if ((this._idCurriculum != value))
				{
					this.OnidCurriculumChanging(value);
					this.SendPropertyChanging();
					this._idCurriculum = value;
					this.SendPropertyChanged("idCurriculum");
					this.OnidCurriculumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademiclLevel_idAcadLevel", DbType="Int NOT NULL")]
		public int AcademiclLevel_idAcadLevel
		{
			get
			{
				return this._AcademiclLevel_idAcadLevel;
			}
			set
			{
				if ((this._AcademiclLevel_idAcadLevel != value))
				{
					if (this._AcademicLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAcademiclLevel_idAcadLevelChanging(value);
					this.SendPropertyChanging();
					this._AcademiclLevel_idAcadLevel = value;
					this.SendPropertyChanged("AcademiclLevel_idAcadLevel");
					this.OnAcademiclLevel_idAcadLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurriculumName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CurriculumName
		{
			get
			{
				return this._CurriculumName;
			}
			set
			{
				if ((this._CurriculumName != value))
				{
					this.OnCurriculumNameChanging(value);
					this.SendPropertyChanging();
					this._CurriculumName = value;
					this.SendPropertyChanged("CurriculumName");
					this.OnCurriculumNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Curriculum_Qualification", Storage="_Qualifications", ThisKey="idCurriculum", OtherKey="Curriculum_idCurriculum")]
		public EntitySet<Qualification> Qualifications
		{
			get
			{
				return this._Qualifications;
			}
			set
			{
				this._Qualifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AcademicLevel_Curriculum", Storage="_AcademicLevel", ThisKey="AcademiclLevel_idAcadLevel", OtherKey="idAcadLevel", IsForeignKey=true)]
		public AcademicLevel AcademicLevel
		{
			get
			{
				return this._AcademicLevel.Entity;
			}
			set
			{
				AcademicLevel previousValue = this._AcademicLevel.Entity;
				if (((previousValue != value) 
							|| (this._AcademicLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AcademicLevel.Entity = null;
						previousValue.Curriculums.Remove(this);
					}
					this._AcademicLevel.Entity = value;
					if ((value != null))
					{
						value.Curriculums.Add(this);
						this._AcademiclLevel_idAcadLevel = value.idAcadLevel;
					}
					else
					{
						this._AcademiclLevel_idAcadLevel = default(int);
					}
					this.SendPropertyChanged("AcademicLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Qualifications(Qualification entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = this;
		}
		
		private void detach_Qualifications(Qualification entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LOTopic")]
	public partial class LOTopic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idLOTopic;
		
		private int _UnitLearningOutcome_idUnitLearningOutcome;
		
		private string _TopicName;
		
		private string _TopicCode;
		
		private System.Nullable<int> _TopicTestingMethod_idTopicTestingMethod;
		
		private EntitySet<TaskTopicRange> _TaskTopicRanges;
		
		private EntitySet<TopicKeyword> _TopicKeywords;
		
		private EntityRef<TopicTestingMethod> _TopicTestingMethod;
		
		private EntityRef<UnitLearningOutcome> _UnitLearningOutcome;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidLOTopicChanging(int value);
    partial void OnidLOTopicChanged();
    partial void OnUnitLearningOutcome_idUnitLearningOutcomeChanging(int value);
    partial void OnUnitLearningOutcome_idUnitLearningOutcomeChanged();
    partial void OnTopicNameChanging(string value);
    partial void OnTopicNameChanged();
    partial void OnTopicCodeChanging(string value);
    partial void OnTopicCodeChanged();
    partial void OnTopicTestingMethod_idTopicTestingMethodChanging(System.Nullable<int> value);
    partial void OnTopicTestingMethod_idTopicTestingMethodChanged();
    #endregion
		
		public LOTopic()
		{
			this._TaskTopicRanges = new EntitySet<TaskTopicRange>(new Action<TaskTopicRange>(this.attach_TaskTopicRanges), new Action<TaskTopicRange>(this.detach_TaskTopicRanges));
			this._TopicKeywords = new EntitySet<TopicKeyword>(new Action<TopicKeyword>(this.attach_TopicKeywords), new Action<TopicKeyword>(this.detach_TopicKeywords));
			this._TopicTestingMethod = default(EntityRef<TopicTestingMethod>);
			this._UnitLearningOutcome = default(EntityRef<UnitLearningOutcome>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idLOTopic", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idLOTopic
		{
			get
			{
				return this._idLOTopic;
			}
			set
			{
				if ((this._idLOTopic != value))
				{
					this.OnidLOTopicChanging(value);
					this.SendPropertyChanging();
					this._idLOTopic = value;
					this.SendPropertyChanged("idLOTopic");
					this.OnidLOTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitLearningOutcome_idUnitLearningOutcome", DbType="Int NOT NULL")]
		public int UnitLearningOutcome_idUnitLearningOutcome
		{
			get
			{
				return this._UnitLearningOutcome_idUnitLearningOutcome;
			}
			set
			{
				if ((this._UnitLearningOutcome_idUnitLearningOutcome != value))
				{
					if (this._UnitLearningOutcome.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUnitLearningOutcome_idUnitLearningOutcomeChanging(value);
					this.SendPropertyChanging();
					this._UnitLearningOutcome_idUnitLearningOutcome = value;
					this.SendPropertyChanged("UnitLearningOutcome_idUnitLearningOutcome");
					this.OnUnitLearningOutcome_idUnitLearningOutcomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TopicName
		{
			get
			{
				return this._TopicName;
			}
			set
			{
				if ((this._TopicName != value))
				{
					this.OnTopicNameChanging(value);
					this.SendPropertyChanging();
					this._TopicName = value;
					this.SendPropertyChanged("TopicName");
					this.OnTopicNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicCode", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string TopicCode
		{
			get
			{
				return this._TopicCode;
			}
			set
			{
				if ((this._TopicCode != value))
				{
					this.OnTopicCodeChanging(value);
					this.SendPropertyChanging();
					this._TopicCode = value;
					this.SendPropertyChanged("TopicCode");
					this.OnTopicCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicTestingMethod_idTopicTestingMethod", DbType="Int")]
		public System.Nullable<int> TopicTestingMethod_idTopicTestingMethod
		{
			get
			{
				return this._TopicTestingMethod_idTopicTestingMethod;
			}
			set
			{
				if ((this._TopicTestingMethod_idTopicTestingMethod != value))
				{
					if (this._TopicTestingMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicTestingMethod_idTopicTestingMethodChanging(value);
					this.SendPropertyChanging();
					this._TopicTestingMethod_idTopicTestingMethod = value;
					this.SendPropertyChanged("TopicTestingMethod_idTopicTestingMethod");
					this.OnTopicTestingMethod_idTopicTestingMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOTopic_TaskTopicRange", Storage="_TaskTopicRanges", ThisKey="idLOTopic", OtherKey="LOTopic_idLOTopic")]
		public EntitySet<TaskTopicRange> TaskTopicRanges
		{
			get
			{
				return this._TaskTopicRanges;
			}
			set
			{
				this._TaskTopicRanges.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOTopic_TopicKeyword", Storage="_TopicKeywords", ThisKey="idLOTopic", OtherKey="LOTopic_idLOTopic")]
		public EntitySet<TopicKeyword> TopicKeywords
		{
			get
			{
				return this._TopicKeywords;
			}
			set
			{
				this._TopicKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TopicTestingMethod_LOTopic", Storage="_TopicTestingMethod", ThisKey="TopicTestingMethod_idTopicTestingMethod", OtherKey="idTopicTestingMethod", IsForeignKey=true)]
		public TopicTestingMethod TopicTestingMethod
		{
			get
			{
				return this._TopicTestingMethod.Entity;
			}
			set
			{
				TopicTestingMethod previousValue = this._TopicTestingMethod.Entity;
				if (((previousValue != value) 
							|| (this._TopicTestingMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TopicTestingMethod.Entity = null;
						previousValue.LOTopics.Remove(this);
					}
					this._TopicTestingMethod.Entity = value;
					if ((value != null))
					{
						value.LOTopics.Add(this);
						this._TopicTestingMethod_idTopicTestingMethod = value.idTopicTestingMethod;
					}
					else
					{
						this._TopicTestingMethod_idTopicTestingMethod = default(Nullable<int>);
					}
					this.SendPropertyChanged("TopicTestingMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitLearningOutcome_LOTopic", Storage="_UnitLearningOutcome", ThisKey="UnitLearningOutcome_idUnitLearningOutcome", OtherKey="idUnitLearningOutcome", IsForeignKey=true)]
		public UnitLearningOutcome UnitLearningOutcome
		{
			get
			{
				return this._UnitLearningOutcome.Entity;
			}
			set
			{
				UnitLearningOutcome previousValue = this._UnitLearningOutcome.Entity;
				if (((previousValue != value) 
							|| (this._UnitLearningOutcome.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UnitLearningOutcome.Entity = null;
						previousValue.LOTopics.Remove(this);
					}
					this._UnitLearningOutcome.Entity = value;
					if ((value != null))
					{
						value.LOTopics.Add(this);
						this._UnitLearningOutcome_idUnitLearningOutcome = value.idUnitLearningOutcome;
					}
					else
					{
						this._UnitLearningOutcome_idUnitLearningOutcome = default(int);
					}
					this.SendPropertyChanged("UnitLearningOutcome");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskTopicRanges(TaskTopicRange entity)
		{
			this.SendPropertyChanging();
			entity.LOTopic = this;
		}
		
		private void detach_TaskTopicRanges(TaskTopicRange entity)
		{
			this.SendPropertyChanging();
			entity.LOTopic = null;
		}
		
		private void attach_TopicKeywords(TopicKeyword entity)
		{
			this.SendPropertyChanging();
			entity.LOTopic = this;
		}
		
		private void detach_TopicKeywords(TopicKeyword entity)
		{
			this.SendPropertyChanging();
			entity.LOTopic = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Qualification")]
	public partial class Qualification : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idQualification;
		
		private int _Curriculum_idCurriculum;
		
		private string _QualificationName;
		
		private string _QualificationCode;
		
		private System.Nullable<System.DateTime> _QualValidFrom;
		
		private System.Nullable<System.DateTime> _QualValidTo;
		
		private string _QualAccreditCode;
		
		private EntitySet<QualificationPathway> _QualificationPathways;
		
		private EntitySet<QualUnit> _QualUnits;
		
		private EntityRef<Curriculum> _Curriculum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidQualificationChanging(int value);
    partial void OnidQualificationChanged();
    partial void OnCurriculum_idCurriculumChanging(int value);
    partial void OnCurriculum_idCurriculumChanged();
    partial void OnQualificationNameChanging(string value);
    partial void OnQualificationNameChanged();
    partial void OnQualificationCodeChanging(string value);
    partial void OnQualificationCodeChanged();
    partial void OnQualValidFromChanging(System.Nullable<System.DateTime> value);
    partial void OnQualValidFromChanged();
    partial void OnQualValidToChanging(System.Nullable<System.DateTime> value);
    partial void OnQualValidToChanged();
    partial void OnQualAccreditCodeChanging(string value);
    partial void OnQualAccreditCodeChanged();
    #endregion
		
		public Qualification()
		{
			this._QualificationPathways = new EntitySet<QualificationPathway>(new Action<QualificationPathway>(this.attach_QualificationPathways), new Action<QualificationPathway>(this.detach_QualificationPathways));
			this._QualUnits = new EntitySet<QualUnit>(new Action<QualUnit>(this.attach_QualUnits), new Action<QualUnit>(this.detach_QualUnits));
			this._Curriculum = default(EntityRef<Curriculum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idQualification", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idQualification
		{
			get
			{
				return this._idQualification;
			}
			set
			{
				if ((this._idQualification != value))
				{
					this.OnidQualificationChanging(value);
					this.SendPropertyChanging();
					this._idQualification = value;
					this.SendPropertyChanged("idQualification");
					this.OnidQualificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Curriculum_idCurriculum", DbType="Int NOT NULL")]
		public int Curriculum_idCurriculum
		{
			get
			{
				return this._Curriculum_idCurriculum;
			}
			set
			{
				if ((this._Curriculum_idCurriculum != value))
				{
					if (this._Curriculum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculum_idCurriculumChanging(value);
					this.SendPropertyChanging();
					this._Curriculum_idCurriculum = value;
					this.SendPropertyChanged("Curriculum_idCurriculum");
					this.OnCurriculum_idCurriculumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualificationName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string QualificationName
		{
			get
			{
				return this._QualificationName;
			}
			set
			{
				if ((this._QualificationName != value))
				{
					this.OnQualificationNameChanging(value);
					this.SendPropertyChanging();
					this._QualificationName = value;
					this.SendPropertyChanged("QualificationName");
					this.OnQualificationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualificationCode", DbType="VarChar(45)")]
		public string QualificationCode
		{
			get
			{
				return this._QualificationCode;
			}
			set
			{
				if ((this._QualificationCode != value))
				{
					this.OnQualificationCodeChanging(value);
					this.SendPropertyChanging();
					this._QualificationCode = value;
					this.SendPropertyChanged("QualificationCode");
					this.OnQualificationCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualValidFrom", DbType="Date")]
		public System.Nullable<System.DateTime> QualValidFrom
		{
			get
			{
				return this._QualValidFrom;
			}
			set
			{
				if ((this._QualValidFrom != value))
				{
					this.OnQualValidFromChanging(value);
					this.SendPropertyChanging();
					this._QualValidFrom = value;
					this.SendPropertyChanged("QualValidFrom");
					this.OnQualValidFromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualValidTo", DbType="Date")]
		public System.Nullable<System.DateTime> QualValidTo
		{
			get
			{
				return this._QualValidTo;
			}
			set
			{
				if ((this._QualValidTo != value))
				{
					this.OnQualValidToChanging(value);
					this.SendPropertyChanging();
					this._QualValidTo = value;
					this.SendPropertyChanged("QualValidTo");
					this.OnQualValidToChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualAccreditCode", DbType="VarChar(45)")]
		public string QualAccreditCode
		{
			get
			{
				return this._QualAccreditCode;
			}
			set
			{
				if ((this._QualAccreditCode != value))
				{
					this.OnQualAccreditCodeChanging(value);
					this.SendPropertyChanging();
					this._QualAccreditCode = value;
					this.SendPropertyChanged("QualAccreditCode");
					this.OnQualAccreditCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_QualificationPathway", Storage="_QualificationPathways", ThisKey="idQualification", OtherKey="Qualification_idQualification")]
		public EntitySet<QualificationPathway> QualificationPathways
		{
			get
			{
				return this._QualificationPathways;
			}
			set
			{
				this._QualificationPathways.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_QualUnit", Storage="_QualUnits", ThisKey="idQualification", OtherKey="Qualification_idQualification")]
		public EntitySet<QualUnit> QualUnits
		{
			get
			{
				return this._QualUnits;
			}
			set
			{
				this._QualUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Curriculum_Qualification", Storage="_Curriculum", ThisKey="Curriculum_idCurriculum", OtherKey="idCurriculum", IsForeignKey=true)]
		public Curriculum Curriculum
		{
			get
			{
				return this._Curriculum.Entity;
			}
			set
			{
				Curriculum previousValue = this._Curriculum.Entity;
				if (((previousValue != value) 
							|| (this._Curriculum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curriculum.Entity = null;
						previousValue.Qualifications.Remove(this);
					}
					this._Curriculum.Entity = value;
					if ((value != null))
					{
						value.Qualifications.Add(this);
						this._Curriculum_idCurriculum = value.idCurriculum;
					}
					else
					{
						this._Curriculum_idCurriculum = default(int);
					}
					this.SendPropertyChanged("Curriculum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_QualificationPathways(QualificationPathway entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = this;
		}
		
		private void detach_QualificationPathways(QualificationPathway entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = null;
		}
		
		private void attach_QualUnits(QualUnit entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = this;
		}
		
		private void detach_QualUnits(QualUnit entity)
		{
			this.SendPropertyChanging();
			entity.Qualification = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualificationPathway")]
	public partial class QualificationPathway : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idQualificationPathway;
		
		private int _Qualification_idQualification;
		
		private string _QualPathwayName;
		
		private EntitySet<Course> _Courses;
		
		private EntityRef<Qualification> _Qualification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidQualificationPathwayChanging(int value);
    partial void OnidQualificationPathwayChanged();
    partial void OnQualification_idQualificationChanging(int value);
    partial void OnQualification_idQualificationChanged();
    partial void OnQualPathwayNameChanging(string value);
    partial void OnQualPathwayNameChanged();
    #endregion
		
		public QualificationPathway()
		{
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			this._Qualification = default(EntityRef<Qualification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idQualificationPathway", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idQualificationPathway
		{
			get
			{
				return this._idQualificationPathway;
			}
			set
			{
				if ((this._idQualificationPathway != value))
				{
					this.OnidQualificationPathwayChanging(value);
					this.SendPropertyChanging();
					this._idQualificationPathway = value;
					this.SendPropertyChanged("idQualificationPathway");
					this.OnidQualificationPathwayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qualification_idQualification", DbType="Int NOT NULL")]
		public int Qualification_idQualification
		{
			get
			{
				return this._Qualification_idQualification;
			}
			set
			{
				if ((this._Qualification_idQualification != value))
				{
					if (this._Qualification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualification_idQualificationChanging(value);
					this.SendPropertyChanging();
					this._Qualification_idQualification = value;
					this.SendPropertyChanged("Qualification_idQualification");
					this.OnQualification_idQualificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualPathwayName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string QualPathwayName
		{
			get
			{
				return this._QualPathwayName;
			}
			set
			{
				if ((this._QualPathwayName != value))
				{
					this.OnQualPathwayNameChanging(value);
					this.SendPropertyChanging();
					this._QualPathwayName = value;
					this.SendPropertyChanged("QualPathwayName");
					this.OnQualPathwayNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualificationPathway_Course", Storage="_Courses", ThisKey="idQualificationPathway", OtherKey="QualificationPathway_idQualificationPathway")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_QualificationPathway", Storage="_Qualification", ThisKey="Qualification_idQualification", OtherKey="idQualification", IsForeignKey=true)]
		public Qualification Qualification
		{
			get
			{
				return this._Qualification.Entity;
			}
			set
			{
				Qualification previousValue = this._Qualification.Entity;
				if (((previousValue != value) 
							|| (this._Qualification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualification.Entity = null;
						previousValue.QualificationPathways.Remove(this);
					}
					this._Qualification.Entity = value;
					if ((value != null))
					{
						value.QualificationPathways.Add(this);
						this._Qualification_idQualification = value.idQualification;
					}
					else
					{
						this._Qualification_idQualification = default(int);
					}
					this.SendPropertyChanged("Qualification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.QualificationPathway = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.QualificationPathway = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.QualUnit")]
	public partial class QualUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idQualUnit;
		
		private int _Qualification_idQualification;
		
		private string _QualUnitTitle;
		
		private int _CGUnitNumber;
		
		private string _QualUnitUAN;
		
		private System.Nullable<int> _QualUnitGLH;
		
		private EntitySet<CourseUnit> _CourseUnits;
		
		private EntitySet<UnitLearningOutcome> _UnitLearningOutcomes;
		
		private EntityRef<Qualification> _Qualification;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidQualUnitChanging(int value);
    partial void OnidQualUnitChanged();
    partial void OnQualification_idQualificationChanging(int value);
    partial void OnQualification_idQualificationChanged();
    partial void OnQualUnitTitleChanging(string value);
    partial void OnQualUnitTitleChanged();
    partial void OnCGUnitNumberChanging(int value);
    partial void OnCGUnitNumberChanged();
    partial void OnQualUnitUANChanging(string value);
    partial void OnQualUnitUANChanged();
    partial void OnQualUnitGLHChanging(System.Nullable<int> value);
    partial void OnQualUnitGLHChanged();
    #endregion
		
		public QualUnit()
		{
			this._CourseUnits = new EntitySet<CourseUnit>(new Action<CourseUnit>(this.attach_CourseUnits), new Action<CourseUnit>(this.detach_CourseUnits));
			this._UnitLearningOutcomes = new EntitySet<UnitLearningOutcome>(new Action<UnitLearningOutcome>(this.attach_UnitLearningOutcomes), new Action<UnitLearningOutcome>(this.detach_UnitLearningOutcomes));
			this._Qualification = default(EntityRef<Qualification>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idQualUnit", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idQualUnit
		{
			get
			{
				return this._idQualUnit;
			}
			set
			{
				if ((this._idQualUnit != value))
				{
					this.OnidQualUnitChanging(value);
					this.SendPropertyChanging();
					this._idQualUnit = value;
					this.SendPropertyChanged("idQualUnit");
					this.OnidQualUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qualification_idQualification", DbType="Int NOT NULL")]
		public int Qualification_idQualification
		{
			get
			{
				return this._Qualification_idQualification;
			}
			set
			{
				if ((this._Qualification_idQualification != value))
				{
					if (this._Qualification.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualification_idQualificationChanging(value);
					this.SendPropertyChanging();
					this._Qualification_idQualification = value;
					this.SendPropertyChanged("Qualification_idQualification");
					this.OnQualification_idQualificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnitTitle", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string QualUnitTitle
		{
			get
			{
				return this._QualUnitTitle;
			}
			set
			{
				if ((this._QualUnitTitle != value))
				{
					this.OnQualUnitTitleChanging(value);
					this.SendPropertyChanging();
					this._QualUnitTitle = value;
					this.SendPropertyChanged("QualUnitTitle");
					this.OnQualUnitTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CGUnitNumber", DbType="Int NOT NULL")]
		public int CGUnitNumber
		{
			get
			{
				return this._CGUnitNumber;
			}
			set
			{
				if ((this._CGUnitNumber != value))
				{
					this.OnCGUnitNumberChanging(value);
					this.SendPropertyChanging();
					this._CGUnitNumber = value;
					this.SendPropertyChanged("CGUnitNumber");
					this.OnCGUnitNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnitUAN", DbType="VarChar(45)")]
		public string QualUnitUAN
		{
			get
			{
				return this._QualUnitUAN;
			}
			set
			{
				if ((this._QualUnitUAN != value))
				{
					this.OnQualUnitUANChanging(value);
					this.SendPropertyChanging();
					this._QualUnitUAN = value;
					this.SendPropertyChanged("QualUnitUAN");
					this.OnQualUnitUANChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnitGLH", DbType="Int")]
		public System.Nullable<int> QualUnitGLH
		{
			get
			{
				return this._QualUnitGLH;
			}
			set
			{
				if ((this._QualUnitGLH != value))
				{
					this.OnQualUnitGLHChanging(value);
					this.SendPropertyChanging();
					this._QualUnitGLH = value;
					this.SendPropertyChanged("QualUnitGLH");
					this.OnQualUnitGLHChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualUnit_CourseUnit", Storage="_CourseUnits", ThisKey="idQualUnit", OtherKey="QualUnit_idQualUnit")]
		public EntitySet<CourseUnit> CourseUnits
		{
			get
			{
				return this._CourseUnits;
			}
			set
			{
				this._CourseUnits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualUnit_UnitLearningOutcome", Storage="_UnitLearningOutcomes", ThisKey="idQualUnit", OtherKey="QualUnit_idQualUnit")]
		public EntitySet<UnitLearningOutcome> UnitLearningOutcomes
		{
			get
			{
				return this._UnitLearningOutcomes;
			}
			set
			{
				this._UnitLearningOutcomes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Qualification_QualUnit", Storage="_Qualification", ThisKey="Qualification_idQualification", OtherKey="idQualification", IsForeignKey=true)]
		public Qualification Qualification
		{
			get
			{
				return this._Qualification.Entity;
			}
			set
			{
				Qualification previousValue = this._Qualification.Entity;
				if (((previousValue != value) 
							|| (this._Qualification.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Qualification.Entity = null;
						previousValue.QualUnits.Remove(this);
					}
					this._Qualification.Entity = value;
					if ((value != null))
					{
						value.QualUnits.Add(this);
						this._Qualification_idQualification = value.idQualification;
					}
					else
					{
						this._Qualification_idQualification = default(int);
					}
					this.SendPropertyChanged("Qualification");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseUnits(CourseUnit entity)
		{
			this.SendPropertyChanging();
			entity.QualUnit = this;
		}
		
		private void detach_CourseUnits(CourseUnit entity)
		{
			this.SendPropertyChanging();
			entity.QualUnit = null;
		}
		
		private void attach_UnitLearningOutcomes(UnitLearningOutcome entity)
		{
			this.SendPropertyChanging();
			entity.QualUnit = this;
		}
		
		private void detach_UnitLearningOutcomes(UnitLearningOutcome entity)
		{
			this.SendPropertyChanging();
			entity.QualUnit = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemUser")]
	public partial class SystemUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSystemUser;
		
		private System.Nullable<int> _SystemUserType_idSystemUserType;
		
		private string _SystemUserForename;
		
		private string _SystemUserSurname;
		
		private string _SystemUserInitialPassword;
		
		private string _SystemUserLoginName;
		
		private string _SystemUserOrganisation;
		
		private string _SystemUserEmail;
		
		private string _SystemUserLandline;
		
		private string _SystemUserMobile;
		
		private EntitySet<Assessment> _Assessments;
		
		private EntityRef<SystemUserType> _SystemUserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSystemUserChanging(int value);
    partial void OnidSystemUserChanged();
    partial void OnSystemUserType_idSystemUserTypeChanging(System.Nullable<int> value);
    partial void OnSystemUserType_idSystemUserTypeChanged();
    partial void OnSystemUserForenameChanging(string value);
    partial void OnSystemUserForenameChanged();
    partial void OnSystemUserSurnameChanging(string value);
    partial void OnSystemUserSurnameChanged();
    partial void OnSystemUserInitialPasswordChanging(string value);
    partial void OnSystemUserInitialPasswordChanged();
    partial void OnSystemUserLoginNameChanging(string value);
    partial void OnSystemUserLoginNameChanged();
    partial void OnSystemUserOrganisationChanging(string value);
    partial void OnSystemUserOrganisationChanged();
    partial void OnSystemUserEmailChanging(string value);
    partial void OnSystemUserEmailChanged();
    partial void OnSystemUserLandlineChanging(string value);
    partial void OnSystemUserLandlineChanged();
    partial void OnSystemUserMobileChanging(string value);
    partial void OnSystemUserMobileChanged();
    #endregion
		
		public SystemUser()
		{
			this._Assessments = new EntitySet<Assessment>(new Action<Assessment>(this.attach_Assessments), new Action<Assessment>(this.detach_Assessments));
			this._SystemUserType = default(EntityRef<SystemUserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSystemUser", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSystemUser
		{
			get
			{
				return this._idSystemUser;
			}
			set
			{
				if ((this._idSystemUser != value))
				{
					this.OnidSystemUserChanging(value);
					this.SendPropertyChanging();
					this._idSystemUser = value;
					this.SendPropertyChanged("idSystemUser");
					this.OnidSystemUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserType_idSystemUserType", DbType="Int")]
		public System.Nullable<int> SystemUserType_idSystemUserType
		{
			get
			{
				return this._SystemUserType_idSystemUserType;
			}
			set
			{
				if ((this._SystemUserType_idSystemUserType != value))
				{
					if (this._SystemUserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSystemUserType_idSystemUserTypeChanging(value);
					this.SendPropertyChanging();
					this._SystemUserType_idSystemUserType = value;
					this.SendPropertyChanged("SystemUserType_idSystemUserType");
					this.OnSystemUserType_idSystemUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserForename", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SystemUserForename
		{
			get
			{
				return this._SystemUserForename;
			}
			set
			{
				if ((this._SystemUserForename != value))
				{
					this.OnSystemUserForenameChanging(value);
					this.SendPropertyChanging();
					this._SystemUserForename = value;
					this.SendPropertyChanged("SystemUserForename");
					this.OnSystemUserForenameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserSurname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SystemUserSurname
		{
			get
			{
				return this._SystemUserSurname;
			}
			set
			{
				if ((this._SystemUserSurname != value))
				{
					this.OnSystemUserSurnameChanging(value);
					this.SendPropertyChanging();
					this._SystemUserSurname = value;
					this.SendPropertyChanged("SystemUserSurname");
					this.OnSystemUserSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserInitialPassword", DbType="VarChar(266)")]
		public string SystemUserInitialPassword
		{
			get
			{
				return this._SystemUserInitialPassword;
			}
			set
			{
				if ((this._SystemUserInitialPassword != value))
				{
					this.OnSystemUserInitialPasswordChanging(value);
					this.SendPropertyChanging();
					this._SystemUserInitialPassword = value;
					this.SendPropertyChanged("SystemUserInitialPassword");
					this.OnSystemUserInitialPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserLoginName", DbType="VarChar(20)")]
		public string SystemUserLoginName
		{
			get
			{
				return this._SystemUserLoginName;
			}
			set
			{
				if ((this._SystemUserLoginName != value))
				{
					this.OnSystemUserLoginNameChanging(value);
					this.SendPropertyChanging();
					this._SystemUserLoginName = value;
					this.SendPropertyChanged("SystemUserLoginName");
					this.OnSystemUserLoginNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserOrganisation", DbType="VarChar(255)")]
		public string SystemUserOrganisation
		{
			get
			{
				return this._SystemUserOrganisation;
			}
			set
			{
				if ((this._SystemUserOrganisation != value))
				{
					this.OnSystemUserOrganisationChanging(value);
					this.SendPropertyChanging();
					this._SystemUserOrganisation = value;
					this.SendPropertyChanged("SystemUserOrganisation");
					this.OnSystemUserOrganisationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserEmail", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SystemUserEmail
		{
			get
			{
				return this._SystemUserEmail;
			}
			set
			{
				if ((this._SystemUserEmail != value))
				{
					this.OnSystemUserEmailChanging(value);
					this.SendPropertyChanging();
					this._SystemUserEmail = value;
					this.SendPropertyChanged("SystemUserEmail");
					this.OnSystemUserEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserLandline", DbType="VarChar(20)")]
		public string SystemUserLandline
		{
			get
			{
				return this._SystemUserLandline;
			}
			set
			{
				if ((this._SystemUserLandline != value))
				{
					this.OnSystemUserLandlineChanging(value);
					this.SendPropertyChanging();
					this._SystemUserLandline = value;
					this.SendPropertyChanged("SystemUserLandline");
					this.OnSystemUserLandlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserMobile", DbType="VarChar(20)")]
		public string SystemUserMobile
		{
			get
			{
				return this._SystemUserMobile;
			}
			set
			{
				if ((this._SystemUserMobile != value))
				{
					this.OnSystemUserMobileChanging(value);
					this.SendPropertyChanging();
					this._SystemUserMobile = value;
					this.SendPropertyChanged("SystemUserMobile");
					this.OnSystemUserMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUser_Assessment", Storage="_Assessments", ThisKey="idSystemUser", OtherKey="SystemUser_idSystemUser")]
		public EntitySet<Assessment> Assessments
		{
			get
			{
				return this._Assessments;
			}
			set
			{
				this._Assessments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUserType_SystemUser", Storage="_SystemUserType", ThisKey="SystemUserType_idSystemUserType", OtherKey="idSystemUserType", IsForeignKey=true)]
		public SystemUserType SystemUserType
		{
			get
			{
				return this._SystemUserType.Entity;
			}
			set
			{
				SystemUserType previousValue = this._SystemUserType.Entity;
				if (((previousValue != value) 
							|| (this._SystemUserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SystemUserType.Entity = null;
						previousValue.SystemUsers.Remove(this);
					}
					this._SystemUserType.Entity = value;
					if ((value != null))
					{
						value.SystemUsers.Add(this);
						this._SystemUserType_idSystemUserType = value.idSystemUserType;
					}
					else
					{
						this._SystemUserType_idSystemUserType = default(Nullable<int>);
					}
					this.SendPropertyChanged("SystemUserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = this;
		}
		
		private void detach_Assessments(Assessment entity)
		{
			this.SendPropertyChanging();
			entity.SystemUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SystemUserType")]
	public partial class SystemUserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idSystemUserType;
		
		private string _SystemUserTypeName;
		
		private EntitySet<SystemUser> _SystemUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSystemUserTypeChanging(int value);
    partial void OnidSystemUserTypeChanged();
    partial void OnSystemUserTypeNameChanging(string value);
    partial void OnSystemUserTypeNameChanged();
    #endregion
		
		public SystemUserType()
		{
			this._SystemUsers = new EntitySet<SystemUser>(new Action<SystemUser>(this.attach_SystemUsers), new Action<SystemUser>(this.detach_SystemUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSystemUserType", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idSystemUserType
		{
			get
			{
				return this._idSystemUserType;
			}
			set
			{
				if ((this._idSystemUserType != value))
				{
					this.OnidSystemUserTypeChanging(value);
					this.SendPropertyChanging();
					this._idSystemUserType = value;
					this.SendPropertyChanged("idSystemUserType");
					this.OnidSystemUserTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserTypeName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SystemUserTypeName
		{
			get
			{
				return this._SystemUserTypeName;
			}
			set
			{
				if ((this._SystemUserTypeName != value))
				{
					this.OnSystemUserTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SystemUserTypeName = value;
					this.SendPropertyChanged("SystemUserTypeName");
					this.OnSystemUserTypeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SystemUserType_SystemUser", Storage="_SystemUsers", ThisKey="idSystemUserType", OtherKey="SystemUserType_idSystemUserType")]
		public EntitySet<SystemUser> SystemUsers
		{
			get
			{
				return this._SystemUsers;
			}
			set
			{
				this._SystemUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUserType = this;
		}
		
		private void detach_SystemUsers(SystemUser entity)
		{
			this.SendPropertyChanging();
			entity.SystemUserType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskAO")]
	public partial class TaskAO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTaskAO;
		
		private int _AssessmentTask_idAssessmentTask;
		
		private int _AssessmentObjective_idAssessmentObjective;
		
		private EntityRef<AssessmentObjective> _AssessmentObjective;
		
		private EntityRef<AssessmentTask> _AssessmentTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTaskAOChanging(int value);
    partial void OnidTaskAOChanged();
    partial void OnAssessmentTask_idAssessmentTaskChanging(int value);
    partial void OnAssessmentTask_idAssessmentTaskChanged();
    partial void OnAssessmentObjective_idAssessmentObjectiveChanging(int value);
    partial void OnAssessmentObjective_idAssessmentObjectiveChanged();
    #endregion
		
		public TaskAO()
		{
			this._AssessmentObjective = default(EntityRef<AssessmentObjective>);
			this._AssessmentTask = default(EntityRef<AssessmentTask>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTaskAO", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTaskAO
		{
			get
			{
				return this._idTaskAO;
			}
			set
			{
				if ((this._idTaskAO != value))
				{
					this.OnidTaskAOChanging(value);
					this.SendPropertyChanging();
					this._idTaskAO = value;
					this.SendPropertyChanged("idTaskAO");
					this.OnidTaskAOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTask_idAssessmentTask", DbType="Int NOT NULL")]
		public int AssessmentTask_idAssessmentTask
		{
			get
			{
				return this._AssessmentTask_idAssessmentTask;
			}
			set
			{
				if ((this._AssessmentTask_idAssessmentTask != value))
				{
					if (this._AssessmentTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentTask_idAssessmentTaskChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTask_idAssessmentTask = value;
					this.SendPropertyChanged("AssessmentTask_idAssessmentTask");
					this.OnAssessmentTask_idAssessmentTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentObjective_idAssessmentObjective", DbType="Int NOT NULL")]
		public int AssessmentObjective_idAssessmentObjective
		{
			get
			{
				return this._AssessmentObjective_idAssessmentObjective;
			}
			set
			{
				if ((this._AssessmentObjective_idAssessmentObjective != value))
				{
					if (this._AssessmentObjective.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentObjective_idAssessmentObjectiveChanging(value);
					this.SendPropertyChanging();
					this._AssessmentObjective_idAssessmentObjective = value;
					this.SendPropertyChanged("AssessmentObjective_idAssessmentObjective");
					this.OnAssessmentObjective_idAssessmentObjectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentObjective_TaskAO", Storage="_AssessmentObjective", ThisKey="AssessmentObjective_idAssessmentObjective", OtherKey="idAssessmentObjective", IsForeignKey=true)]
		public AssessmentObjective AssessmentObjective
		{
			get
			{
				return this._AssessmentObjective.Entity;
			}
			set
			{
				AssessmentObjective previousValue = this._AssessmentObjective.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentObjective.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentObjective.Entity = null;
						previousValue.TaskAOs.Remove(this);
					}
					this._AssessmentObjective.Entity = value;
					if ((value != null))
					{
						value.TaskAOs.Add(this);
						this._AssessmentObjective_idAssessmentObjective = value.idAssessmentObjective;
					}
					else
					{
						this._AssessmentObjective_idAssessmentObjective = default(int);
					}
					this.SendPropertyChanged("AssessmentObjective");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTask_TaskAO", Storage="_AssessmentTask", ThisKey="AssessmentTask_idAssessmentTask", OtherKey="idAssessmentTask", IsForeignKey=true)]
		public AssessmentTask AssessmentTask
		{
			get
			{
				return this._AssessmentTask.Entity;
			}
			set
			{
				AssessmentTask previousValue = this._AssessmentTask.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentTask.Entity = null;
						previousValue.TaskAOs.Remove(this);
					}
					this._AssessmentTask.Entity = value;
					if ((value != null))
					{
						value.TaskAOs.Add(this);
						this._AssessmentTask_idAssessmentTask = value.idAssessmentTask;
					}
					else
					{
						this._AssessmentTask_idAssessmentTask = default(int);
					}
					this.SendPropertyChanged("AssessmentTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskKeyword")]
	public partial class TaskKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTaskKeyword;
		
		private int _TopicKeyword_idTopicKeyword;
		
		private int _AssessmentTask_idAssessmentTask;
		
		private EntityRef<AssessmentTask> _AssessmentTask;
		
		private EntityRef<TopicKeyword> _TopicKeyword;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTaskKeywordChanging(int value);
    partial void OnidTaskKeywordChanged();
    partial void OnTopicKeyword_idTopicKeywordChanging(int value);
    partial void OnTopicKeyword_idTopicKeywordChanged();
    partial void OnAssessmentTask_idAssessmentTaskChanging(int value);
    partial void OnAssessmentTask_idAssessmentTaskChanged();
    #endregion
		
		public TaskKeyword()
		{
			this._AssessmentTask = default(EntityRef<AssessmentTask>);
			this._TopicKeyword = default(EntityRef<TopicKeyword>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTaskKeyword", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTaskKeyword
		{
			get
			{
				return this._idTaskKeyword;
			}
			set
			{
				if ((this._idTaskKeyword != value))
				{
					this.OnidTaskKeywordChanging(value);
					this.SendPropertyChanging();
					this._idTaskKeyword = value;
					this.SendPropertyChanged("idTaskKeyword");
					this.OnidTaskKeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TopicKeyword_idTopicKeyword", DbType="Int NOT NULL")]
		public int TopicKeyword_idTopicKeyword
		{
			get
			{
				return this._TopicKeyword_idTopicKeyword;
			}
			set
			{
				if ((this._TopicKeyword_idTopicKeyword != value))
				{
					if (this._TopicKeyword.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTopicKeyword_idTopicKeywordChanging(value);
					this.SendPropertyChanging();
					this._TopicKeyword_idTopicKeyword = value;
					this.SendPropertyChanged("TopicKeyword_idTopicKeyword");
					this.OnTopicKeyword_idTopicKeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTask_idAssessmentTask", DbType="Int NOT NULL")]
		public int AssessmentTask_idAssessmentTask
		{
			get
			{
				return this._AssessmentTask_idAssessmentTask;
			}
			set
			{
				if ((this._AssessmentTask_idAssessmentTask != value))
				{
					if (this._AssessmentTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentTask_idAssessmentTaskChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTask_idAssessmentTask = value;
					this.SendPropertyChanged("AssessmentTask_idAssessmentTask");
					this.OnAssessmentTask_idAssessmentTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTask_TaskKeyword", Storage="_AssessmentTask", ThisKey="AssessmentTask_idAssessmentTask", OtherKey="idAssessmentTask", IsForeignKey=true)]
		public AssessmentTask AssessmentTask
		{
			get
			{
				return this._AssessmentTask.Entity;
			}
			set
			{
				AssessmentTask previousValue = this._AssessmentTask.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentTask.Entity = null;
						previousValue.TaskKeywords.Remove(this);
					}
					this._AssessmentTask.Entity = value;
					if ((value != null))
					{
						value.TaskKeywords.Add(this);
						this._AssessmentTask_idAssessmentTask = value.idAssessmentTask;
					}
					else
					{
						this._AssessmentTask_idAssessmentTask = default(int);
					}
					this.SendPropertyChanged("AssessmentTask");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TopicKeyword_TaskKeyword", Storage="_TopicKeyword", ThisKey="TopicKeyword_idTopicKeyword", OtherKey="idTopicKeyword", IsForeignKey=true)]
		public TopicKeyword TopicKeyword
		{
			get
			{
				return this._TopicKeyword.Entity;
			}
			set
			{
				TopicKeyword previousValue = this._TopicKeyword.Entity;
				if (((previousValue != value) 
							|| (this._TopicKeyword.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TopicKeyword.Entity = null;
						previousValue.TaskKeywords.Remove(this);
					}
					this._TopicKeyword.Entity = value;
					if ((value != null))
					{
						value.TaskKeywords.Add(this);
						this._TopicKeyword_idTopicKeyword = value.idTopicKeyword;
					}
					else
					{
						this._TopicKeyword_idTopicKeyword = default(int);
					}
					this.SendPropertyChanged("TopicKeyword");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TaskTopicRange")]
	public partial class TaskTopicRange : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTaskTopicRange;
		
		private int _LOTopic_idLOTopic;
		
		private int _AssessmentTask_idAssessmentTask;
		
		private EntityRef<AssessmentTask> _AssessmentTask;
		
		private EntityRef<LOTopic> _LOTopic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTaskTopicRangeChanging(int value);
    partial void OnidTaskTopicRangeChanged();
    partial void OnLOTopic_idLOTopicChanging(int value);
    partial void OnLOTopic_idLOTopicChanged();
    partial void OnAssessmentTask_idAssessmentTaskChanging(int value);
    partial void OnAssessmentTask_idAssessmentTaskChanged();
    #endregion
		
		public TaskTopicRange()
		{
			this._AssessmentTask = default(EntityRef<AssessmentTask>);
			this._LOTopic = default(EntityRef<LOTopic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTaskTopicRange", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTaskTopicRange
		{
			get
			{
				return this._idTaskTopicRange;
			}
			set
			{
				if ((this._idTaskTopicRange != value))
				{
					this.OnidTaskTopicRangeChanging(value);
					this.SendPropertyChanging();
					this._idTaskTopicRange = value;
					this.SendPropertyChanged("idTaskTopicRange");
					this.OnidTaskTopicRangeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOTopic_idLOTopic", DbType="Int NOT NULL")]
		public int LOTopic_idLOTopic
		{
			get
			{
				return this._LOTopic_idLOTopic;
			}
			set
			{
				if ((this._LOTopic_idLOTopic != value))
				{
					if (this._LOTopic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLOTopic_idLOTopicChanging(value);
					this.SendPropertyChanging();
					this._LOTopic_idLOTopic = value;
					this.SendPropertyChanged("LOTopic_idLOTopic");
					this.OnLOTopic_idLOTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AssessmentTask_idAssessmentTask", DbType="Int NOT NULL")]
		public int AssessmentTask_idAssessmentTask
		{
			get
			{
				return this._AssessmentTask_idAssessmentTask;
			}
			set
			{
				if ((this._AssessmentTask_idAssessmentTask != value))
				{
					if (this._AssessmentTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessmentTask_idAssessmentTaskChanging(value);
					this.SendPropertyChanging();
					this._AssessmentTask_idAssessmentTask = value;
					this.SendPropertyChanged("AssessmentTask_idAssessmentTask");
					this.OnAssessmentTask_idAssessmentTaskChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AssessmentTask_TaskTopicRange", Storage="_AssessmentTask", ThisKey="AssessmentTask_idAssessmentTask", OtherKey="idAssessmentTask", IsForeignKey=true)]
		public AssessmentTask AssessmentTask
		{
			get
			{
				return this._AssessmentTask.Entity;
			}
			set
			{
				AssessmentTask previousValue = this._AssessmentTask.Entity;
				if (((previousValue != value) 
							|| (this._AssessmentTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AssessmentTask.Entity = null;
						previousValue.TaskTopicRanges.Remove(this);
					}
					this._AssessmentTask.Entity = value;
					if ((value != null))
					{
						value.TaskTopicRanges.Add(this);
						this._AssessmentTask_idAssessmentTask = value.idAssessmentTask;
					}
					else
					{
						this._AssessmentTask_idAssessmentTask = default(int);
					}
					this.SendPropertyChanged("AssessmentTask");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOTopic_TaskTopicRange", Storage="_LOTopic", ThisKey="LOTopic_idLOTopic", OtherKey="idLOTopic", IsForeignKey=true)]
		public LOTopic LOTopic
		{
			get
			{
				return this._LOTopic.Entity;
			}
			set
			{
				LOTopic previousValue = this._LOTopic.Entity;
				if (((previousValue != value) 
							|| (this._LOTopic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOTopic.Entity = null;
						previousValue.TaskTopicRanges.Remove(this);
					}
					this._LOTopic.Entity = value;
					if ((value != null))
					{
						value.TaskTopicRanges.Add(this);
						this._LOTopic_idLOTopic = value.idLOTopic;
					}
					else
					{
						this._LOTopic_idLOTopic = default(int);
					}
					this.SendPropertyChanged("LOTopic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TopicKeyword")]
	public partial class TopicKeyword : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTopicKeyword;
		
		private int _LOTopic_idLOTopic;
		
		private string _KeywordText;
		
		private EntitySet<TaskKeyword> _TaskKeywords;
		
		private EntityRef<LOTopic> _LOTopic;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTopicKeywordChanging(int value);
    partial void OnidTopicKeywordChanged();
    partial void OnLOTopic_idLOTopicChanging(int value);
    partial void OnLOTopic_idLOTopicChanged();
    partial void OnKeywordTextChanging(string value);
    partial void OnKeywordTextChanged();
    #endregion
		
		public TopicKeyword()
		{
			this._TaskKeywords = new EntitySet<TaskKeyword>(new Action<TaskKeyword>(this.attach_TaskKeywords), new Action<TaskKeyword>(this.detach_TaskKeywords));
			this._LOTopic = default(EntityRef<LOTopic>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTopicKeyword", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTopicKeyword
		{
			get
			{
				return this._idTopicKeyword;
			}
			set
			{
				if ((this._idTopicKeyword != value))
				{
					this.OnidTopicKeywordChanging(value);
					this.SendPropertyChanging();
					this._idTopicKeyword = value;
					this.SendPropertyChanged("idTopicKeyword");
					this.OnidTopicKeywordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LOTopic_idLOTopic", DbType="Int NOT NULL")]
		public int LOTopic_idLOTopic
		{
			get
			{
				return this._LOTopic_idLOTopic;
			}
			set
			{
				if ((this._LOTopic_idLOTopic != value))
				{
					if (this._LOTopic.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLOTopic_idLOTopicChanging(value);
					this.SendPropertyChanging();
					this._LOTopic_idLOTopic = value;
					this.SendPropertyChanged("LOTopic_idLOTopic");
					this.OnLOTopic_idLOTopicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeywordText", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string KeywordText
		{
			get
			{
				return this._KeywordText;
			}
			set
			{
				if ((this._KeywordText != value))
				{
					this.OnKeywordTextChanging(value);
					this.SendPropertyChanging();
					this._KeywordText = value;
					this.SendPropertyChanged("KeywordText");
					this.OnKeywordTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TopicKeyword_TaskKeyword", Storage="_TaskKeywords", ThisKey="idTopicKeyword", OtherKey="TopicKeyword_idTopicKeyword")]
		public EntitySet<TaskKeyword> TaskKeywords
		{
			get
			{
				return this._TaskKeywords;
			}
			set
			{
				this._TaskKeywords.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LOTopic_TopicKeyword", Storage="_LOTopic", ThisKey="LOTopic_idLOTopic", OtherKey="idLOTopic", IsForeignKey=true)]
		public LOTopic LOTopic
		{
			get
			{
				return this._LOTopic.Entity;
			}
			set
			{
				LOTopic previousValue = this._LOTopic.Entity;
				if (((previousValue != value) 
							|| (this._LOTopic.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LOTopic.Entity = null;
						previousValue.TopicKeywords.Remove(this);
					}
					this._LOTopic.Entity = value;
					if ((value != null))
					{
						value.TopicKeywords.Add(this);
						this._LOTopic_idLOTopic = value.idLOTopic;
					}
					else
					{
						this._LOTopic_idLOTopic = default(int);
					}
					this.SendPropertyChanged("LOTopic");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TaskKeywords(TaskKeyword entity)
		{
			this.SendPropertyChanging();
			entity.TopicKeyword = this;
		}
		
		private void detach_TaskKeywords(TaskKeyword entity)
		{
			this.SendPropertyChanging();
			entity.TopicKeyword = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TopicTestingMethod")]
	public partial class TopicTestingMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idTopicTestingMethod;
		
		private string _TestingMethodFull;
		
		private string _TestingMethodShort;
		
		private EntitySet<LOTopic> _LOTopics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidTopicTestingMethodChanging(int value);
    partial void OnidTopicTestingMethodChanged();
    partial void OnTestingMethodFullChanging(string value);
    partial void OnTestingMethodFullChanged();
    partial void OnTestingMethodShortChanging(string value);
    partial void OnTestingMethodShortChanged();
    #endregion
		
		public TopicTestingMethod()
		{
			this._LOTopics = new EntitySet<LOTopic>(new Action<LOTopic>(this.attach_LOTopics), new Action<LOTopic>(this.detach_LOTopics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idTopicTestingMethod", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idTopicTestingMethod
		{
			get
			{
				return this._idTopicTestingMethod;
			}
			set
			{
				if ((this._idTopicTestingMethod != value))
				{
					this.OnidTopicTestingMethodChanging(value);
					this.SendPropertyChanging();
					this._idTopicTestingMethod = value;
					this.SendPropertyChanged("idTopicTestingMethod");
					this.OnidTopicTestingMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestingMethodFull", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string TestingMethodFull
		{
			get
			{
				return this._TestingMethodFull;
			}
			set
			{
				if ((this._TestingMethodFull != value))
				{
					this.OnTestingMethodFullChanging(value);
					this.SendPropertyChanging();
					this._TestingMethodFull = value;
					this.SendPropertyChanged("TestingMethodFull");
					this.OnTestingMethodFullChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TestingMethodShort", DbType="VarChar(20)")]
		public string TestingMethodShort
		{
			get
			{
				return this._TestingMethodShort;
			}
			set
			{
				if ((this._TestingMethodShort != value))
				{
					this.OnTestingMethodShortChanging(value);
					this.SendPropertyChanging();
					this._TestingMethodShort = value;
					this.SendPropertyChanged("TestingMethodShort");
					this.OnTestingMethodShortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TopicTestingMethod_LOTopic", Storage="_LOTopics", ThisKey="idTopicTestingMethod", OtherKey="TopicTestingMethod_idTopicTestingMethod")]
		public EntitySet<LOTopic> LOTopics
		{
			get
			{
				return this._LOTopics;
			}
			set
			{
				this._LOTopics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOTopics(LOTopic entity)
		{
			this.SendPropertyChanging();
			entity.TopicTestingMethod = this;
		}
		
		private void detach_LOTopics(LOTopic entity)
		{
			this.SendPropertyChanging();
			entity.TopicTestingMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitLearningOutcome")]
	public partial class UnitLearningOutcome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUnitLearningOutcome;
		
		private int _QualUnit_idQualUnit;
		
		private string _LearningOutsomeName;
		
		private int _LearningOutcomeNumber;
		
		private EntitySet<LOTopic> _LOTopics;
		
		private EntityRef<QualUnit> _QualUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUnitLearningOutcomeChanging(int value);
    partial void OnidUnitLearningOutcomeChanged();
    partial void OnQualUnit_idQualUnitChanging(int value);
    partial void OnQualUnit_idQualUnitChanged();
    partial void OnLearningOutsomeNameChanging(string value);
    partial void OnLearningOutsomeNameChanged();
    partial void OnLearningOutcomeNumberChanging(int value);
    partial void OnLearningOutcomeNumberChanged();
    #endregion
		
		public UnitLearningOutcome()
		{
			this._LOTopics = new EntitySet<LOTopic>(new Action<LOTopic>(this.attach_LOTopics), new Action<LOTopic>(this.detach_LOTopics));
			this._QualUnit = default(EntityRef<QualUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUnitLearningOutcome", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUnitLearningOutcome
		{
			get
			{
				return this._idUnitLearningOutcome;
			}
			set
			{
				if ((this._idUnitLearningOutcome != value))
				{
					this.OnidUnitLearningOutcomeChanging(value);
					this.SendPropertyChanging();
					this._idUnitLearningOutcome = value;
					this.SendPropertyChanged("idUnitLearningOutcome");
					this.OnidUnitLearningOutcomeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnit_idQualUnit", DbType="Int NOT NULL")]
		public int QualUnit_idQualUnit
		{
			get
			{
				return this._QualUnit_idQualUnit;
			}
			set
			{
				if ((this._QualUnit_idQualUnit != value))
				{
					if (this._QualUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQualUnit_idQualUnitChanging(value);
					this.SendPropertyChanging();
					this._QualUnit_idQualUnit = value;
					this.SendPropertyChanged("QualUnit_idQualUnit");
					this.OnQualUnit_idQualUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningOutsomeName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string LearningOutsomeName
		{
			get
			{
				return this._LearningOutsomeName;
			}
			set
			{
				if ((this._LearningOutsomeName != value))
				{
					this.OnLearningOutsomeNameChanging(value);
					this.SendPropertyChanging();
					this._LearningOutsomeName = value;
					this.SendPropertyChanged("LearningOutsomeName");
					this.OnLearningOutsomeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearningOutcomeNumber", DbType="Int NOT NULL")]
		public int LearningOutcomeNumber
		{
			get
			{
				return this._LearningOutcomeNumber;
			}
			set
			{
				if ((this._LearningOutcomeNumber != value))
				{
					this.OnLearningOutcomeNumberChanging(value);
					this.SendPropertyChanging();
					this._LearningOutcomeNumber = value;
					this.SendPropertyChanged("LearningOutcomeNumber");
					this.OnLearningOutcomeNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UnitLearningOutcome_LOTopic", Storage="_LOTopics", ThisKey="idUnitLearningOutcome", OtherKey="UnitLearningOutcome_idUnitLearningOutcome")]
		public EntitySet<LOTopic> LOTopics
		{
			get
			{
				return this._LOTopics;
			}
			set
			{
				this._LOTopics.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="QualUnit_UnitLearningOutcome", Storage="_QualUnit", ThisKey="QualUnit_idQualUnit", OtherKey="idQualUnit", IsForeignKey=true)]
		public QualUnit QualUnit
		{
			get
			{
				return this._QualUnit.Entity;
			}
			set
			{
				QualUnit previousValue = this._QualUnit.Entity;
				if (((previousValue != value) 
							|| (this._QualUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QualUnit.Entity = null;
						previousValue.UnitLearningOutcomes.Remove(this);
					}
					this._QualUnit.Entity = value;
					if ((value != null))
					{
						value.UnitLearningOutcomes.Add(this);
						this._QualUnit_idQualUnit = value.idQualUnit;
					}
					else
					{
						this._QualUnit_idQualUnit = default(int);
					}
					this.SendPropertyChanged("QualUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LOTopics(LOTopic entity)
		{
			this.SendPropertyChanging();
			entity.UnitLearningOutcome = this;
		}
		
		private void detach_LOTopics(LOTopic entity)
		{
			this.SendPropertyChanging();
			entity.UnitLearningOutcome = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnitsAssessed")]
	public partial class UnitsAssessed : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idUnitsAssessed;
		
		private int _CourseUnit_idCourseUnit;
		
		private int _Assessment_idAssessment;
		
		private EntityRef<Assessment> _Assessment;
		
		private EntityRef<CourseUnit> _CourseUnit;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidUnitsAssessedChanging(int value);
    partial void OnidUnitsAssessedChanged();
    partial void OnCourseUnit_idCourseUnitChanging(int value);
    partial void OnCourseUnit_idCourseUnitChanged();
    partial void OnAssessment_idAssessmentChanging(int value);
    partial void OnAssessment_idAssessmentChanged();
    #endregion
		
		public UnitsAssessed()
		{
			this._Assessment = default(EntityRef<Assessment>);
			this._CourseUnit = default(EntityRef<CourseUnit>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idUnitsAssessed", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idUnitsAssessed
		{
			get
			{
				return this._idUnitsAssessed;
			}
			set
			{
				if ((this._idUnitsAssessed != value))
				{
					this.OnidUnitsAssessedChanging(value);
					this.SendPropertyChanging();
					this._idUnitsAssessed = value;
					this.SendPropertyChanged("idUnitsAssessed");
					this.OnidUnitsAssessedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseUnit_idCourseUnit", DbType="Int NOT NULL")]
		public int CourseUnit_idCourseUnit
		{
			get
			{
				return this._CourseUnit_idCourseUnit;
			}
			set
			{
				if ((this._CourseUnit_idCourseUnit != value))
				{
					if (this._CourseUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseUnit_idCourseUnitChanging(value);
					this.SendPropertyChanging();
					this._CourseUnit_idCourseUnit = value;
					this.SendPropertyChanged("CourseUnit_idCourseUnit");
					this.OnCourseUnit_idCourseUnitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Assessment_idAssessment", DbType="Int NOT NULL")]
		public int Assessment_idAssessment
		{
			get
			{
				return this._Assessment_idAssessment;
			}
			set
			{
				if ((this._Assessment_idAssessment != value))
				{
					if (this._Assessment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAssessment_idAssessmentChanging(value);
					this.SendPropertyChanging();
					this._Assessment_idAssessment = value;
					this.SendPropertyChanged("Assessment_idAssessment");
					this.OnAssessment_idAssessmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Assessment_UnitsAssessed", Storage="_Assessment", ThisKey="Assessment_idAssessment", OtherKey="idAssessment", IsForeignKey=true)]
		public Assessment Assessment
		{
			get
			{
				return this._Assessment.Entity;
			}
			set
			{
				Assessment previousValue = this._Assessment.Entity;
				if (((previousValue != value) 
							|| (this._Assessment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Assessment.Entity = null;
						previousValue.UnitsAssesseds.Remove(this);
					}
					this._Assessment.Entity = value;
					if ((value != null))
					{
						value.UnitsAssesseds.Add(this);
						this._Assessment_idAssessment = value.idAssessment;
					}
					else
					{
						this._Assessment_idAssessment = default(int);
					}
					this.SendPropertyChanged("Assessment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourseUnit_UnitsAssessed", Storage="_CourseUnit", ThisKey="CourseUnit_idCourseUnit", OtherKey="idCourseUnit", IsForeignKey=true)]
		public CourseUnit CourseUnit
		{
			get
			{
				return this._CourseUnit.Entity;
			}
			set
			{
				CourseUnit previousValue = this._CourseUnit.Entity;
				if (((previousValue != value) 
							|| (this._CourseUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourseUnit.Entity = null;
						previousValue.UnitsAssesseds.Remove(this);
					}
					this._CourseUnit.Entity = value;
					if ((value != null))
					{
						value.UnitsAssesseds.Add(this);
						this._CourseUnit_idCourseUnit = value.idCourseUnit;
					}
					else
					{
						this._CourseUnit_idCourseUnit = default(int);
					}
					this.SendPropertyChanged("CourseUnit");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GetAcadLevelByIDResult
	{
		
		private int _idAcadLevel;
		
		private string _AcadLevelName;
		
		private string _AcadLevelShort;
		
		private System.Nullable<int> _AcadLevelSort;
		
		public GetAcadLevelByIDResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idAcadLevel", DbType="Int NOT NULL")]
		public int idAcadLevel
		{
			get
			{
				return this._idAcadLevel;
			}
			set
			{
				if ((this._idAcadLevel != value))
				{
					this._idAcadLevel = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcadLevelName", DbType="VarChar(45) NOT NULL", CanBeNull=false)]
		public string AcadLevelName
		{
			get
			{
				return this._AcadLevelName;
			}
			set
			{
				if ((this._AcadLevelName != value))
				{
					this._AcadLevelName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcadLevelShort", DbType="VarChar(6) NOT NULL", CanBeNull=false)]
		public string AcadLevelShort
		{
			get
			{
				return this._AcadLevelShort;
			}
			set
			{
				if ((this._AcadLevelShort != value))
				{
					this._AcadLevelShort = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcadLevelSort", DbType="Int")]
		public System.Nullable<int> AcadLevelSort
		{
			get
			{
				return this._AcadLevelSort;
			}
			set
			{
				if ((this._AcadLevelSort != value))
				{
					this._AcadLevelSort = value;
				}
			}
		}
	}
	
	public partial class GetSystemUserByLoginResult
	{
		
		private int _idSystemUser;
		
		private System.Nullable<int> _SystemUserType_idSystemUserType;
		
		private string _SystemUserForename;
		
		private string _SystemUserSurname;
		
		private string _SystemUserInitialPassword;
		
		private string _SystemUserLoginName;
		
		private string _SystemUserOrganisation;
		
		private string _SystemUserEmail;
		
		private string _SystemUserLandline;
		
		private string _SystemUserMobile;
		
		public GetSystemUserByLoginResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSystemUser", DbType="Int NOT NULL")]
		public int idSystemUser
		{
			get
			{
				return this._idSystemUser;
			}
			set
			{
				if ((this._idSystemUser != value))
				{
					this._idSystemUser = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserType_idSystemUserType", DbType="Int")]
		public System.Nullable<int> SystemUserType_idSystemUserType
		{
			get
			{
				return this._SystemUserType_idSystemUserType;
			}
			set
			{
				if ((this._SystemUserType_idSystemUserType != value))
				{
					this._SystemUserType_idSystemUserType = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserForename", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SystemUserForename
		{
			get
			{
				return this._SystemUserForename;
			}
			set
			{
				if ((this._SystemUserForename != value))
				{
					this._SystemUserForename = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserSurname", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string SystemUserSurname
		{
			get
			{
				return this._SystemUserSurname;
			}
			set
			{
				if ((this._SystemUserSurname != value))
				{
					this._SystemUserSurname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserInitialPassword", DbType="VarChar(266)")]
		public string SystemUserInitialPassword
		{
			get
			{
				return this._SystemUserInitialPassword;
			}
			set
			{
				if ((this._SystemUserInitialPassword != value))
				{
					this._SystemUserInitialPassword = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserLoginName", DbType="VarChar(20)")]
		public string SystemUserLoginName
		{
			get
			{
				return this._SystemUserLoginName;
			}
			set
			{
				if ((this._SystemUserLoginName != value))
				{
					this._SystemUserLoginName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserOrganisation", DbType="VarChar(255)")]
		public string SystemUserOrganisation
		{
			get
			{
				return this._SystemUserOrganisation;
			}
			set
			{
				if ((this._SystemUserOrganisation != value))
				{
					this._SystemUserOrganisation = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserEmail", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string SystemUserEmail
		{
			get
			{
				return this._SystemUserEmail;
			}
			set
			{
				if ((this._SystemUserEmail != value))
				{
					this._SystemUserEmail = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserLandline", DbType="VarChar(20)")]
		public string SystemUserLandline
		{
			get
			{
				return this._SystemUserLandline;
			}
			set
			{
				if ((this._SystemUserLandline != value))
				{
					this._SystemUserLandline = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SystemUserMobile", DbType="VarChar(20)")]
		public string SystemUserMobile
		{
			get
			{
				return this._SystemUserMobile;
			}
			set
			{
				if ((this._SystemUserMobile != value))
				{
					this._SystemUserMobile = value;
				}
			}
		}
	}
	
	public partial class GetAllCourseUnitsResult
	{
		
		private int _idCourseUnit;
		
		private int _UnitStatus_idUnitStatus;
		
		private int _Course_idCourse;
		
		private int _QualUnit_idQualUnit;
		
		private string _CourseUnitTitle;
		
		public GetAllCourseUnitsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourseUnit", DbType="Int NOT NULL")]
		public int idCourseUnit
		{
			get
			{
				return this._idCourseUnit;
			}
			set
			{
				if ((this._idCourseUnit != value))
				{
					this._idCourseUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitStatus_idUnitStatus", DbType="Int NOT NULL")]
		public int UnitStatus_idUnitStatus
		{
			get
			{
				return this._UnitStatus_idUnitStatus;
			}
			set
			{
				if ((this._UnitStatus_idUnitStatus != value))
				{
					this._UnitStatus_idUnitStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_idCourse", DbType="Int NOT NULL")]
		public int Course_idCourse
		{
			get
			{
				return this._Course_idCourse;
			}
			set
			{
				if ((this._Course_idCourse != value))
				{
					this._Course_idCourse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnit_idQualUnit", DbType="Int NOT NULL")]
		public int QualUnit_idQualUnit
		{
			get
			{
				return this._QualUnit_idQualUnit;
			}
			set
			{
				if ((this._QualUnit_idQualUnit != value))
				{
					this._QualUnit_idQualUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseUnitTitle", DbType="VarChar(255)")]
		public string CourseUnitTitle
		{
			get
			{
				return this._CourseUnitTitle;
			}
			set
			{
				if ((this._CourseUnitTitle != value))
				{
					this._CourseUnitTitle = value;
				}
			}
		}
	}
	
	public partial class GetCoursesByPathwayResult
	{
		
		private int _idCourse;
		
		private string _CourseName;
		
		public GetCoursesByPathwayResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourse", DbType="Int NOT NULL")]
		public int idCourse
		{
			get
			{
				return this._idCourse;
			}
			set
			{
				if ((this._idCourse != value))
				{
					this._idCourse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CourseName
		{
			get
			{
				return this._CourseName;
			}
			set
			{
				if ((this._CourseName != value))
				{
					this._CourseName = value;
				}
			}
		}
	}
	
	public partial class GetCourseUnitsByCourseResult
	{
		
		private int _idCourseUnit;
		
		private string _CourseUnitTitle;
		
		public GetCourseUnitsByCourseResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourseUnit", DbType="Int NOT NULL")]
		public int idCourseUnit
		{
			get
			{
				return this._idCourseUnit;
			}
			set
			{
				if ((this._idCourseUnit != value))
				{
					this._idCourseUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseUnitTitle", DbType="VarChar(255)")]
		public string CourseUnitTitle
		{
			get
			{
				return this._CourseUnitTitle;
			}
			set
			{
				if ((this._CourseUnitTitle != value))
				{
					this._CourseUnitTitle = value;
				}
			}
		}
	}
	
	public partial class GetCourseUnitsByCourseAllInfoResult
	{
		
		private int _idCourseUnit;
		
		private int _UnitStatus_idUnitStatus;
		
		private int _Course_idCourse;
		
		private int _QualUnit_idQualUnit;
		
		private string _CourseUnitTitle;
		
		public GetCourseUnitsByCourseAllInfoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCourseUnit", DbType="Int NOT NULL")]
		public int idCourseUnit
		{
			get
			{
				return this._idCourseUnit;
			}
			set
			{
				if ((this._idCourseUnit != value))
				{
					this._idCourseUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UnitStatus_idUnitStatus", DbType="Int NOT NULL")]
		public int UnitStatus_idUnitStatus
		{
			get
			{
				return this._UnitStatus_idUnitStatus;
			}
			set
			{
				if ((this._UnitStatus_idUnitStatus != value))
				{
					this._UnitStatus_idUnitStatus = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Course_idCourse", DbType="Int NOT NULL")]
		public int Course_idCourse
		{
			get
			{
				return this._Course_idCourse;
			}
			set
			{
				if ((this._Course_idCourse != value))
				{
					this._Course_idCourse = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualUnit_idQualUnit", DbType="Int NOT NULL")]
		public int QualUnit_idQualUnit
		{
			get
			{
				return this._QualUnit_idQualUnit;
			}
			set
			{
				if ((this._QualUnit_idQualUnit != value))
				{
					this._QualUnit_idQualUnit = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseUnitTitle", DbType="VarChar(255)")]
		public string CourseUnitTitle
		{
			get
			{
				return this._CourseUnitTitle;
			}
			set
			{
				if ((this._CourseUnitTitle != value))
				{
					this._CourseUnitTitle = value;
				}
			}
		}
	}
	
	public partial class GetCurriculumByLevelResult
	{
		
		private int _idCurriculum;
		
		private string _CurriculumName;
		
		public GetCurriculumByLevelResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idCurriculum", DbType="Int NOT NULL")]
		public int idCurriculum
		{
			get
			{
				return this._idCurriculum;
			}
			set
			{
				if ((this._idCurriculum != value))
				{
					this._idCurriculum = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurriculumName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string CurriculumName
		{
			get
			{
				return this._CurriculumName;
			}
			set
			{
				if ((this._CurriculumName != value))
				{
					this._CurriculumName = value;
				}
			}
		}
	}
	
	public partial class GetPathwaysByQualificationResult
	{
		
		private int _idQualificationPathway;
		
		private string _QualPathwayName;
		
		public GetPathwaysByQualificationResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idQualificationPathway", DbType="Int NOT NULL")]
		public int idQualificationPathway
		{
			get
			{
				return this._idQualificationPathway;
			}
			set
			{
				if ((this._idQualificationPathway != value))
				{
					this._idQualificationPathway = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualPathwayName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string QualPathwayName
		{
			get
			{
				return this._QualPathwayName;
			}
			set
			{
				if ((this._QualPathwayName != value))
				{
					this._QualPathwayName = value;
				}
			}
		}
	}
	
	public partial class GetQualificationByCurriculumResult
	{
		
		private int _idQualification;
		
		private string _QualificationName;
		
		private string _QualificationCode;
		
		private System.Nullable<System.DateTime> _QualValidFrom;
		
		private System.Nullable<System.DateTime> _QualValidTo;
		
		private string _QualAccreditCode;
		
		public GetQualificationByCurriculumResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idQualification", DbType="Int NOT NULL")]
		public int idQualification
		{
			get
			{
				return this._idQualification;
			}
			set
			{
				if ((this._idQualification != value))
				{
					this._idQualification = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualificationName", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string QualificationName
		{
			get
			{
				return this._QualificationName;
			}
			set
			{
				if ((this._QualificationName != value))
				{
					this._QualificationName = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualificationCode", DbType="VarChar(45)")]
		public string QualificationCode
		{
			get
			{
				return this._QualificationCode;
			}
			set
			{
				if ((this._QualificationCode != value))
				{
					this._QualificationCode = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualValidFrom", DbType="Date")]
		public System.Nullable<System.DateTime> QualValidFrom
		{
			get
			{
				return this._QualValidFrom;
			}
			set
			{
				if ((this._QualValidFrom != value))
				{
					this._QualValidFrom = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualValidTo", DbType="Date")]
		public System.Nullable<System.DateTime> QualValidTo
		{
			get
			{
				return this._QualValidTo;
			}
			set
			{
				if ((this._QualValidTo != value))
				{
					this._QualValidTo = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QualAccreditCode", DbType="VarChar(45)")]
		public string QualAccreditCode
		{
			get
			{
				return this._QualAccreditCode;
			}
			set
			{
				if ((this._QualAccreditCode != value))
				{
					this._QualAccreditCode = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
